{"ast":null,"code":"'use strict';\n/*!\n* returns discriminator by discriminatorMapping.value\n*\n* @param {Schema} schema\n* @param {string} value\n*/\n\nmodule.exports = function getSchemaDiscriminatorByValue(schema, value) {\n  if (schema == null || schema.discriminators == null) {\n    return null;\n  }\n\n  for (const key of Object.keys(schema.discriminators)) {\n    const discriminatorSchema = schema.discriminators[key];\n\n    if (discriminatorSchema.discriminatorMapping == null) {\n      continue;\n    }\n\n    if (discriminatorSchema.discriminatorMapping.value === value) {\n      return discriminatorSchema;\n    }\n  }\n\n  return null;\n};","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/helpers/discriminator/getSchemaDiscriminatorByValue.js"],"names":["module","exports","getSchemaDiscriminatorByValue","schema","value","discriminators","key","Object","keys","discriminatorSchema","discriminatorMapping"],"mappings":"AAAA;AAEA;;;;;;;AAOAA,MAAM,CAACC,OAAP,GAAiB,SAASC,6BAAT,CAAuCC,MAAvC,EAA+CC,KAA/C,EAAsD;AACrE,MAAID,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACE,cAAP,IAAyB,IAA/C,EAAqD;AACnD,WAAO,IAAP;AACD;;AACD,OAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYL,MAAM,CAACE,cAAnB,CAAlB,EAAsD;AACpD,UAAMI,mBAAmB,GAAGN,MAAM,CAACE,cAAP,CAAsBC,GAAtB,CAA5B;;AACA,QAAIG,mBAAmB,CAACC,oBAApB,IAA4C,IAAhD,EAAsD;AACpD;AACD;;AACD,QAAID,mBAAmB,CAACC,oBAApB,CAAyCN,KAAzC,KAAmDA,KAAvD,EAA8D;AAC5D,aAAOK,mBAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAdD","sourcesContent":["'use strict';\n\n/*!\n* returns discriminator by discriminatorMapping.value\n*\n* @param {Schema} schema\n* @param {string} value\n*/\n\nmodule.exports = function getSchemaDiscriminatorByValue(schema, value) {\n  if (schema == null || schema.discriminators == null) {\n    return null;\n  }\n  for (const key of Object.keys(schema.discriminators)) {\n    const discriminatorSchema = schema.discriminators[key];\n    if (discriminatorSchema.discriminatorMapping == null) {\n      continue;\n    }\n    if (discriminatorSchema.discriminatorMapping.value === value) {\n      return discriminatorSchema;\n    }\n  }\n  return null;\n};"]},"metadata":{},"sourceType":"script"}