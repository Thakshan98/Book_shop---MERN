{"ast":null,"code":"'use strict';\n/*!\n * Module requirements.\n */\n\nconst MongooseError = require('../error/index');\n\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\n\nconst SchemaType = require('../schematype');\n\nconst castNumber = require('../cast/number');\n\nconst handleBitwiseOperator = require('./operators/bitwise');\n\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst CastError = SchemaType.CastError;\nlet Document;\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n/**\n * Attaches a getter for all Number instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\n\nSchemaNumber.get = SchemaType.get;\n/**\n * Sets a default option for all Number instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n\n  if (caster === false) {\n    caster = v => {\n      if (typeof v !== 'number') {\n        throw new Error();\n      }\n\n      return v;\n    };\n  }\n\n  this._cast = caster;\n  return this._cast;\n};\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaNumber.schemaName = 'Number';\nSchemaNumber.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  } // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n\n\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ? this.constructor.checkRequired() : SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n/**\n * Sets a minimum number validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function (v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a maximum number validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function (v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a enum validator\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.enum = function (values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n  if (!Array.isArray(values)) {\n    values = Array.prototype.slice.call(arguments);\n    message = MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n  return this;\n};\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\n\nSchemaNumber.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('Number', value, this.path, null, this);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    const ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  const val = value && typeof value._id !== 'undefined' ? value._id : // documents\n  value;\n  const castNumber = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaNumber.cast();\n\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = this._castForQuery($conditional);\n  return val;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaNumber;","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/schema/number.js"],"names":["MongooseError","require","SchemaNumberOptions","SchemaType","castNumber","handleBitwiseOperator","utils","populateModelSymbol","CastError","Document","SchemaNumber","key","options","call","get","set","_cast","cast","caster","arguments","length","v","Error","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","_checkRequired","Number","checkRequired","value","doc","_isRef","min","message","minValidator","validators","filter","validator","undefined","msg","messages","replace","push","type","max","maxValidator","enum","values","enumValidator","Array","isArray","slice","indexOf","enumValues","init","$__","wasPopulated","Buffer","isBuffer","isObject","path","$__fullPath","owner","ownerDocument","pop","populated","ret","val","_id","err","handleSingle","handleArray","_this","map","m","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$mod","castForQuery","$conditional","handler","_castForQuery","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module requirements.\n */\n\nconst MongooseError = require('../error/index');\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\nconst SchemaType = require('../schematype');\nconst castNumber = require('../cast/number');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\n\nconst populateModelSymbol = require('../helpers/symbols').populateModelSymbol;\n\nconst CastError = SchemaType.CastError;\nlet Document;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * Attaches a getter for all Number instances.\n *\n * ####Example:\n *\n *     // Make all numbers round down\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\n *\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\n *     new Model({ test: 3.14 }).test; // 3\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\n * Sets a default option for all Number instances.\n *\n * ####Example:\n *\n *     // Make all numbers have option `min` equal to 0.\n *     mongoose.Schema.Number.set('min', 0);\n *\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaNumber.set = SchemaType.set;\n\n/*!\n * ignore\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\n * Get/set the function used to cast arbitrary values to numbers.\n *\n * ####Example:\n *\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\n *     const original = mongoose.Number.cast();\n *     mongoose.Number.cast(v => {\n *       if (v === '') { return 0; }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Number.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = v => {\n      if (typeof v !== 'number') {\n        throw new Error();\n      }\n      return v;\n    };\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\nSchemaNumber.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\n * ignore\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\n * Override the function the required validator uses to check whether a string\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired == 'function' ?\n    this.constructor.checkRequired() :\n    SchemaNumber.checkRequired();\n\n  return _checkRequired(value);\n};\n\n/**\n * Sets a minimum number validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, min: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     const schema = new Schema({ n: { type: Number, min: min })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, max: 10 })\n *     const M = db.model('M', s)\n *     const m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     const schema = new Schema({ n: { type: Number, max: max })\n *     const M = mongoose.model('Measurement', schema);\n *     const s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a enum validator\n *\n * ####Example:\n *\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\n *     const M = db.model('M', s);\n *\n *     const m = new M({ n: 4 });\n *     await m.save(); // throws validation error\n *\n *     m.n = 3;\n *     await m.save(); // succeeds\n *\n * @param {Array} values allowed values\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.enum = function(values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n\n  if (!Array.isArray(values)) {\n    values = Array.prototype.slice.call(arguments);\n    message = MongooseError.messages.Number.enum;\n  }\n\n  message = message == null ? MongooseError.messages.Number.enum : message;\n\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'number') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('Number', value, this.path, null, this);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    const path = doc.$__fullPath(this.path);\n    const owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    const pop = owner.populated(path, true);\n    const ret = new pop.options[populateModelSymbol](value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  const val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  const castNumber = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaNumber.cast();\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $mod: handleArray\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val);\n  }\n  val = this._castForQuery($conditional);\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n"]},"metadata":{},"sourceType":"script"}