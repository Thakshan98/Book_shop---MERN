{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst InternalCache = require('./internal');\n\nconst MongooseError = require('./error/index');\n\nconst MixedSchema = require('./schema/mixed');\n\nconst ObjectExpectedError = require('./error/objectExpected');\n\nconst ObjectParameterError = require('./error/objectParameter');\n\nconst ParallelValidateError = require('./error/parallelValidate');\n\nconst Schema = require('./schema');\n\nconst StrictModeError = require('./error/strict');\n\nconst ValidationError = require('./error/validation');\n\nconst ValidatorError = require('./error/validator');\n\nconst VirtualType = require('./virtualtype');\n\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\n\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\n\nconst compile = require('./helpers/document/compile').compile;\n\nconst defineKey = require('./helpers/document/compile').defineKey;\n\nconst flatten = require('./helpers/common').flatten;\n\nconst get = require('./helpers/get');\n\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\n\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\n\nconst idGetter = require('./plugins/idGetter');\n\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\n\nconst isExclusive = require('./helpers/projection/isExclusive');\n\nconst inspect = require('util').inspect;\n\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\n\nconst mpath = require('mpath');\n\nconst queryhelpers = require('./queryhelpers');\n\nconst utils = require('./utils');\n\nconst isPromise = require('./helpers/isPromise');\n\nconst clone = utils.clone;\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\nconst arrayAtomicsBackupSymbol = Symbol('mongoose.Array#atomicsBackup');\n\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\n\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\n\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\n\nconst getSymbol = require('./helpers/symbols').getSymbol;\n\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\n\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\n\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\nconst specialProperties = utils.specialProperties;\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n\n  options = Object.assign({}, options);\n  const defaults = get(options, 'defaults', true);\n  options.defaults = defaults; // Support `browserDocument.js` syntax\n\n  if (this.schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ? new Schema(fields) : fields;\n\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache();\n  this.$__.emitter = new EventEmitter();\n  this.isNew = 'isNew' in options ? options.isNew : true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n  this.$locals = {};\n  this.$op = null;\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  const schema = this.schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  let exclude = null; // determine if this doc is a result of a query with\n  // excluded fields\n\n  if (utils.isPOJO(fields)) {\n    exclude = isExclusive(fields);\n  }\n\n  const hasIncludedChildren = exclude === false && fields ? $__hasIncludedChildren(fields) : {};\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false); // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n\n    if (defaults) {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, true, {\n        isNew: this.isNew\n      });\n    }\n  }\n\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    }\n  } // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n\n\n  if (options.willInit && defaults) {\n    EventEmitter.prototype.once.call(this, 'init', () => {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n        isNew: this.isNew\n      });\n    });\n  } else if (defaults) {\n    $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n      isNew: this.isNew\n    });\n  }\n\n  this.$__._id = this._id;\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n\n    const keys = Object.keys(this._doc);\n    keys.forEach(function (key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\n\n\nutils.each(['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners', 'removeAllListeners', 'addListener'], function (emitterFn) {\n  Document.prototype[emitterFn] = function () {\n    return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n  };\n});\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n/**\n * The documents schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.schema;\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * ####Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.isNew;\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.errors;\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * ####Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$op;\n/*!\n * ignore\n */\n\nfunction $__hasIncludedChildren(fields) {\n  const hasIncludedChildren = {};\n  const keys = Object.keys(fields);\n\n  for (const key of keys) {\n    const parts = key.split('.');\n    const c = [];\n\n    for (const part of parts) {\n      c.push(part);\n      hasIncludedChildren[c.join('.')] = 1;\n    }\n  }\n\n  return hasIncludedChildren;\n}\n/*!\n * ignore\n */\n\n\nfunction $__applyDefaults(doc, fields, skipId, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\n  const paths = Object.keys(doc.schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    const p = paths[i];\n\n    if (p === '_id' && skipId) {\n      continue;\n    }\n\n    const type = doc.schema.paths[p];\n    const path = p.indexOf('.') === -1 ? [p] : p.split('.');\n    const len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (typeof type.defaultValue === 'function') {\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n            break;\n          }\n\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n            break;\n          }\n        } else if (!isBeforeSetters) {\n          // Non-function defaults should always run **before** setters\n          continue;\n        }\n\n        if (pathsToSkip && pathsToSkip[curPath]) {\n          break;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          try {\n            def = type.getDefault(doc, false);\n          } catch (err) {\n            doc.invalidate(p, err);\n            break;\n          }\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            doc.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n}\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__buildDoc = function (obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n  const paths = Object.keys(this.schema.paths). // Don't build up any paths that are underneath a map, we don't know\n  // what the keys will be\n  filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = p.split('.');\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n      curPath += (!curPath.length ? '' : '.') + piece; // support excluding intermediary levels\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n/*!\n * Converts to POJO when you use the document for querying\n */\n\n\nDocument.prototype.toBSON = function () {\n  return this.toObject(internalToObjectOptions);\n};\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](/docs/middleware.html).\n * Note that `init` hooks are [synchronous](/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.init = function (doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__init = function (doc, opts) {\n  this.isNew = false;\n  this.$init = true;\n  opts = opts || {}; // handle docs with populated paths\n  // If doc._id is not null or undefined\n\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n\n        child.$__.parent = this;\n      }\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n  markArraySubdocsPopulated(this, opts.populated);\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n  this.$__._id = this._id;\n  return this;\n};\n/*!\n * If populating a path within a document array, make sure each\n * subdoc within the array knows its subpaths are populated.\n *\n * ####Example:\n *     const doc = await Article.findOne().populate('comments.author');\n *     doc.comments[0].populated('author'); // Should be set\n */\n\n\nfunction markArraySubdocsPopulated(doc, populated) {\n  if (doc._id == null || populated == null || populated.length === 0) {\n    return;\n  }\n\n  const id = String(doc._id);\n\n  for (const item of populated) {\n    if (item.isVirtual) {\n      continue;\n    }\n\n    const path = item.path;\n    const pieces = path.split('.');\n\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      const subpath = pieces.slice(0, i + 1).join('.');\n      const rest = pieces.slice(i + 1).join('.');\n      const val = doc.get(subpath);\n\n      if (val == null) {\n        continue;\n      }\n\n      if (val.isMongooseDocumentArray) {\n        for (let j = 0; j < val.length; ++j) {\n          val[j].populated(rest, item._docs[id] == null ? [] : item._docs[id][j], item);\n        }\n\n        break;\n      }\n    }\n  }\n}\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schema;\n  let path;\n  let i;\n  let index = 0;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.schema.path(path); // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n\n    if (self.schema.$isRootDiscriminator && !self.isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = schema._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const intCache = obj[i].$__ || {};\n        const wasPopulated = intCache.wasPopulated || null;\n\n        if (schema && !wasPopulated) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      } // mark as hydrated\n\n\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.update = function update() {\n  const args = utils.args(arguments);\n  args.unshift({\n    _id: this._id\n  });\n  const query = this.constructor.update.apply(this.constructor, args);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  return query;\n};\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.updateOne](#model_Model.updateOne)\n *\n * @see Model.updateOne #model_Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and the [Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({\n    _id: this._id\n  }, doc, options);\n\n  query._pre(cb => {\n    this.constructor._middleware.execPre('updateOne', this, [this], cb);\n  });\n\n  query._post(cb => {\n    this.constructor._middleware.execPost('updateOne', this, [this], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * ####Valid options:\n *\n *  - same as in [Model.replaceOne](#model_Model.replaceOne)\n *\n * @see Model.replaceOne #model_Model.replaceOne\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = utils.args(arguments);\n  args.unshift({\n    _id: this._id\n  });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * ####Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    return this.$__.session;\n  }\n\n  this.$__.session = session;\n\n  if (!this.ownerDocument) {\n    const subdocs = this.$__getAllSubdocs();\n\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @name overwrite\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    } // Explicitly skip version key\n\n\n    if (this.schema.options.versionKey && key === this.schema.options.versionKey) {\n      continue;\n    }\n\n    if (this.schema.options.discriminatorKey && key === this.schema.options.discriminatorKey) {\n      continue;\n    }\n\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @name $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  const merge = options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n  const strict = 'strict' in options ? options.strict : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n\n    if (path == null) {\n      const _ = path;\n      path = val;\n      val = _;\n    } else {\n      prefix = val ? val + '.' : '';\n      keys = Object.keys(path);\n      const len = keys.length; // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n      // nested key to ensure key order.\n\n      const _skipMinimizeTopLevel = get(options, '_skipMinimizeTopLevel', false);\n\n      if (len === 0 && _skipMinimizeTopLevel) {\n        delete options._skipMinimizeTopLevel;\n\n        if (val) {\n          this.$set(val, {});\n        }\n\n        return this;\n      }\n\n      while (i < len) {\n        _handleIndex.call(this, i++);\n      }\n\n      return this;\n    }\n  } else {\n    this.$__.$setCalled.add(path);\n  }\n\n  function _handleIndex(i) {\n    key = keys[i];\n    const pathName = prefix + key;\n    pathtype = this.schema.pathType(pathName); // On initial set, delete any nested keys if we're going to overwrite\n    // them to ensure we keep the user's key order.\n\n    if (type === true && !prefix && path[key] != null && pathtype === 'nested' && this._doc[key] != null && Object.keys(this._doc[key]).length === 0) {\n      delete this._doc[key]; // Make sure we set `{}` back even if we minimize re: gh-8565\n\n      options = Object.assign({}, options, {\n        _skipMinimizeTopLevel: true\n      });\n    }\n\n    if (typeof path[key] === 'object' && !utils.isNativeObject(path[key]) && !utils.isMongooseType(path[key]) && path[key] != null && pathtype !== 'virtual' && pathtype !== 'real' && pathtype !== 'adhocOrUndefined' && !(this.$__path(pathName) instanceof MixedSchema) && !(this.schema.paths[pathName] && this.schema.paths[pathName].options && this.schema.paths[pathName].options.ref)) {\n      this.$__.$setCalled.add(prefix + key);\n      this.$set(path[key], prefix + key, constructing, options);\n    } else if (strict) {\n      // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n      if (constructing && path[key] === void 0 && this.get(pathName) !== void 0) {\n        return;\n      }\n\n      if (pathtype === 'adhocOrUndefined') {\n        pathtype = getEmbeddedDiscriminatorPath(this, pathName, {\n          typeOnly: true\n        });\n      }\n\n      if (pathtype === 'real' || pathtype === 'virtual') {\n        // Check for setting single embedded schema to document (gh-3535)\n        let p = path[key];\n\n        if (this.schema.paths[pathName] && this.schema.paths[pathName].$isSingleNested && path[key] instanceof Document) {\n          p = p.toObject({\n            virtuals: false,\n            transform: false\n          });\n        }\n\n        this.$set(prefix + key, p, constructing, options);\n      } else if (pathtype === 'nested' && path[key] instanceof Document) {\n        this.$set(prefix + key, path[key].toObject({\n          transform: false\n        }), constructing, options);\n      } else if (strict === 'throw') {\n        if (pathtype === 'nested') {\n          throw new ObjectExpectedError(key, path[key]);\n        } else {\n          throw new StrictModeError(key);\n        }\n      }\n    } else if (path[key] !== void 0) {\n      this.$set(prefix + key, path[key], constructing, options);\n    }\n  }\n\n  let pathType = this.schema.pathType(path);\n\n  if (pathType === 'adhocOrUndefined') {\n    pathType = getEmbeddedDiscriminatorPath(this, path, {\n      typeOnly: true\n    });\n  } // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n\n\n  val = handleSpreadDoc(val);\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = Object.keys(val);\n      this.$__setValue(path, {});\n\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing);\n      }\n\n      this.markModified(path);\n      cleanModifiedSubpaths(this, path, {\n        skipDocArrays: true\n      });\n      return this;\n    }\n\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.'); // Might need to change path for top-level alias\n\n  if (typeof this.schema.aliases[parts[0]] == 'string') {\n    parts[0] = this.schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.'); // If path is underneath a virtual, bypass everything and just set it.\n\n      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.schema.path(subpath);\n\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  } // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n\n\n  let cur = this._doc;\n  let curPath = '';\n\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n\n    if (!cur) {\n      this.$set(curPath, {}); // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n\n      if (!this.isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark; // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      if (this.get(subpath, null, {\n        getters: false\n      }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  } // if this doc is being constructed we should not trigger getters\n\n\n  const priorVal = (() => {\n    if (this.$__.$options.priorDoc != null) {\n      return this.$__.$options.priorDoc.$__getValue(path);\n    }\n\n    if (constructing) {\n      return void 0;\n    }\n\n    return this.$__getValue(path);\n  })();\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  } // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n\n\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (schema.$isSingleNested && val != null && merge) {\n    if (val instanceof Document) {\n      val = val.toObject({\n        virtuals: false,\n        transform: false\n      });\n    }\n\n    const keys = Object.keys(val);\n\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n\n      if (!(val instanceof Document)) {\n        return false;\n      }\n\n      const model = val.constructor; // Check ref\n\n      const ref = schema.options.ref;\n\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      } // Check refPath\n\n\n      const refPath = schema.options.refPath;\n\n      if (refPath == null) {\n        return false;\n      }\n\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n\n    if (refMatches && val instanceof Document) {\n      this.populated(path, val._id, {\n        [populateModelSymbol]: val.constructor\n      });\n      didPopulate = true;\n    }\n\n    let popOpts;\n\n    if (schema.options && Array.isArray(schema.options[this.schema.options.typeKey]) && schema.options[this.schema.options.typeKey].length && schema.options[this.schema.options.typeKey][0].ref && _isManuallyPopulatedArray(val, schema.options[this.schema.options.typeKey][0].ref)) {\n      if (this.ownerDocument) {\n        popOpts = {\n          [populateModelSymbol]: val[0].constructor\n        };\n        this.ownerDocument().populated(this.$__fullPath(path), val.map(function (v) {\n          return v._id;\n        }), popOpts);\n      } else {\n        popOpts = {\n          [populateModelSymbol]: val[0].constructor\n        };\n        this.populated(path, val.map(function (v) {\n          return v._id;\n        }), popOpts);\n      }\n\n      didPopulate = true;\n    }\n\n    if (this.schema.singleNestedPaths[path] == null) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      val = schema.applySetters(val, this, false, priorVal);\n    }\n\n    if (schema.$isMongooseDocumentArray && Array.isArray(val) && val.length > 0 && val[0] != null && val[0].$__ != null && val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n\n      for (const populatedPath of populatedPaths) {\n        this.populated(path + '.' + populatedPath, val.map(v => v.populated(populatedPath)), val[0].$__.populated[populatedPath].options);\n      }\n\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val[i] = val[i]._id;\n          }\n        }\n      }\n\n      delete this.$__.populated[path];\n    }\n\n    if (schema.$isSingleNested && val != null) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n\n      if (e.$originalErrorPath) {\n        this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e));\n    }\n\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n\n    const modelName = el.constructor.modelName;\n\n    if (modelName == null) {\n      return false;\n    }\n\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.set = Document.prototype.$set;\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function (pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  } // Re: the note about gh-7196, `val` is the raw value without casting or\n  // setters if the full path is under a single nested subdoc because we don't\n  // want to double run setters. So don't set it as modified. See gh-7264.\n\n\n  if (this.schema.singleNestedPaths[path] != null) {\n    return false;\n  }\n\n  if (val === void 0 && !this.isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  } // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n\n\n  if (this.populated(path) && val instanceof Document && deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || this.get(path))) {\n    return true;\n  }\n\n  if (!constructing && val !== null && val !== undefined && path in this.$__.activePaths.states.default && deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n\n  return false;\n};\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__set = function (pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n  const shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts, schema, val, priorVal);\n\n  const _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark); // handle directly setting arrays (gh-1126)\n\n    MongooseArray || (MongooseArray = require('./types/array'));\n\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val); // Update embedded document parent references (gh-5189)\n\n\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function (item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      } // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n\n\n      this.$__.activePaths.forEach(function (modifiedPath) {\n        if (modifiedPath.startsWith(path + '.')) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += cur ? '.' + parts[i] : parts[i];\n\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      if (utils.isPOJO(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\n\nDocument.prototype.$__getValue = function (path) {\n  return utils.getValue(path, this._doc);\n};\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\n\nDocument.prototype.$__setValue = function (path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @api public\n */\n\n\nDocument.prototype.get = function (path, type, options) {\n  let adhoc;\n  options = options || {};\n\n  if (type) {\n    adhoc = this.schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  let schema = this.$__path(path);\n\n  if (schema == null) {\n    schema = this.schema.virtualpath(path);\n  }\n\n  if (schema instanceof MixedSchema) {\n    const virtual = this.schema.virtualpath(path);\n\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n\n  const pieces = path.split('.');\n  let obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    if (schema.getters.length === 0) {\n      return void 0;\n    }\n\n    return schema.applyGetters(null, this);\n  } // Might need to change path for top-level alias\n\n\n  if (typeof this.schema.aliases[pieces[0]] == 'string') {\n    pieces[0] = this.schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], {\n        getters: false\n      });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, utils.clone(obj) || {}, {\n      path: path\n    });\n  }\n\n  return obj;\n};\n/*!\n * ignore\n */\n\n\nDocument.prototype[getSymbol] = Document.prototype.get;\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function (path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n\n  return this.schema.path(path);\n};\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\n\nDocument.prototype.markModified = function (path, scope) {\n  this.$__.activePaths.modify(path);\n\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\n\nDocument.prototype.unmarkModified = function (path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\n\nDocument.prototype.$ignore = function (path) {\n  this.$__.activePaths.ignore(path);\n};\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * ####Example\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {Array}\n * @api public\n */\n\n\nDocument.prototype.directModifiedPaths = function () {\n  return Object.keys(this.$__.activePaths.states.modify);\n};\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](/docs/guide.html#minimize).\n *\n * ####Example:\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\n\nDocument.prototype.$isEmpty = function (path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length > 0) {\n    const v = this.get(path);\n\n    if (v == null) {\n      return true;\n    }\n\n    if (typeof v !== 'object') {\n      return false;\n    }\n\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {Array}\n * @api public\n */\n\n\nDocument.prototype.modifiedPaths = function (options) {\n  options = options || {};\n  const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n\n  const _this = this;\n\n  return directModifiedPaths.reduce(function (list, path) {\n    const parts = path.split('.');\n    list = list.concat(parts.reduce(function (chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function (chain) {\n      return list.indexOf(chain) === -1;\n    }));\n\n    if (!options.includeChildren) {\n      return list;\n    }\n\n    let cur = _this.get(path);\n\n    if (cur != null && typeof cur === 'object') {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n\n      if (Array.isArray(cur)) {\n        const len = cur.length;\n\n        for (let i = 0; i < len; ++i) {\n          if (list.indexOf(path + '.' + i) === -1) {\n            list.push(path + '.' + i);\n\n            if (cur[i] != null && cur[i].$__) {\n              const modified = cur[i].modifiedPaths();\n\n              for (const childPath of modified) {\n                list.push(path + '.' + i + '.' + childPath);\n              }\n            }\n          }\n        }\n      } else {\n        Object.keys(cur).filter(function (key) {\n          return list.indexOf(path + '.' + key) === -1;\n        }).forEach(function (key) {\n          list.push(path + '.' + key);\n        });\n      }\n    }\n\n    return list;\n  }, []);\n};\n/**\n * Returns true if this document was modified, else false.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isModified = function (paths, modifiedPaths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n\n    const modified = modifiedPaths || this.modifiedPaths();\n    const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    const isModifiedChild = paths.some(function (path) {\n      return !!~modified.indexOf(path);\n    });\n    return isModifiedChild || paths.some(function (path) {\n      return directModifiedPaths.some(function (mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.$isDefault = function (path) {\n  return path in this.$__.activePaths.states.default;\n};\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.$isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.$isDeleted(false);\n *       product.$isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.$isDeleted = function (val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isDirectModified = function (path) {\n  return path in this.$__.activePaths.states.modify;\n};\n/**\n * Checks if `path` was initialized.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isInit = function (path) {\n  return path in this.$__.activePaths.states.init;\n};\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    const paths = Object.keys(this.$__.selected);\n    let i = paths.length;\n    let inclusive = null;\n    let cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    i = paths.length;\n    const pathDot = path + '.';\n\n    while (i--) {\n      cur = paths[i];\n\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (cur.startsWith(pathDot)) {\n        return inclusive || cur !== pathDot;\n      }\n\n      if (pathDot.startsWith(cur + '.')) {\n        return inclusive;\n      }\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    const paths = Object.keys(this.$__.selected);\n    let i = paths.length;\n    let inclusive = null;\n    let cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Function} [callback] optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\n\nDocument.prototype.validate = function (pathsToValidate, options, callback) {\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.ownerDocument != null) {// Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack\n    });\n  }\n\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = pathsToValidate;\n    pathsToValidate = null;\n  }\n\n  return promiseOrCallback(callback, cb => {\n    if (parallelValidate != null) {\n      return cb(parallelValidate);\n    }\n\n    this.$__validate(pathsToValidate, options, error => {\n      this.$op = null;\n      cb(error);\n    });\n  }, this.constructor.events);\n};\n/*!\n * ignore\n */\n\n\nfunction _evaluateRequiredFunctions(doc) {\n  Object.keys(doc.$__.activePaths.states.require).forEach(path => {\n    const p = doc.schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc);\n    }\n  });\n}\n/*!\n * ignore\n */\n\n\nfunction _getPathsToValidate(doc) {\n  const skipSchemaValidators = {};\n\n  _evaluateRequiredFunctions(doc); // only validate required fields when necessary\n\n\n  let paths = new Set(Object.keys(doc.$__.activePaths.states.require).filter(function (path) {\n    if (!doc.isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n\n    if (path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n\n    return true;\n  }));\n  Object.keys(doc.$__.activePaths.states.init).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.modify).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.default).forEach(addToPaths);\n\n  function addToPaths(p) {\n    paths.add(p);\n  }\n\n  const subdocs = doc.$__getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc\n      for (const p of paths) {\n        if (p === null || p.startsWith(subdoc.$basePath + '.')) {\n          paths.delete(p);\n        }\n      }\n\n      if (doc.isModified(subdoc.$basePath, modifiedPaths) && !doc.isDirectModified(subdoc.$basePath) && !doc.$isDefault(subdoc.$basePath)) {\n        paths.add(subdoc.$basePath);\n        skipSchemaValidators[subdoc.$basePath] = true;\n      }\n    }\n  } // from here on we're not removing items from paths\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n\n\n  for (const path of paths) {\n    const _pathType = doc.schema.path(path);\n\n    if (!_pathType || !_pathType.$isMongooseArray || // To avoid potential performance issues, skip doc arrays whose children\n    // are not required. `getPositionalPathType()` may be slow, so avoid\n    // it unless we have a case of #6364\n    _pathType.$isMongooseDocumentArray && !get(_pathType, 'schemaOptions.required')) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = {\n    skipArrays: true\n  };\n\n  for (const pathToCheck of paths) {\n    if (doc.schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({\n          transform: false\n        });\n      }\n\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n\n    const _pathType = doc.schema.path(path);\n\n    if (!_pathType || !_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n\n    if (val == null) {\n      continue;\n    }\n\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, skipSchemaValidators];\n}\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__validate = function (pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options && typeof options === 'object' && 'validateModifiedOnly' in options;\n  let shouldValidateModifiedOnly;\n\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = undefined;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n\n      for (const errPath of errors) {\n        if (!this.isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.emit('validate', _this);\n    this.constructor.emit('validate', _this);\n    this.$__.validating = null;\n\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] && validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  }; // only validate required fields when necessary\n\n\n  const pathDetails = _getPathsToValidate(this);\n\n  let paths = shouldValidateModifiedOnly ? pathDetails[0].filter(path => this.isModified(path)) : pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n\n  if (paths.length === 0) {\n    return process.nextTick(function () {\n      const error = _complete();\n\n      if (error) {\n        return _this.schema.s.hooks.execPost('validate:error', _this, [_this], {\n          error: error\n        }, function (error) {\n          callback(error);\n        });\n      }\n\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  const complete = function () {\n    const error = _complete();\n\n    if (error) {\n      return _this.schema.s.hooks.execPost('validate:error', _this, [_this], {\n        error: error\n      }, function (error) {\n        callback(error);\n      });\n    }\n\n    callback(null, _this);\n  };\n\n  const validatePath = function (path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n    process.nextTick(function () {\n      const schemaType = _this.schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      } // If user marked as invalid or there was a cast error, don't validate\n\n\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      let val = _this.$__getValue(path); // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n\n\n      let pop;\n\n      if (val == null && (pop = _this.populated(path))) {\n        val = pop;\n      }\n\n      const scope = path in _this.$__.pathsToScopes ? _this.$__.pathsToScopes[path] : _this;\n      const doValidateOptions = {\n        skipSchemaValidators: skipSchemaValidators[path],\n        path: path\n      };\n      schemaType.doValidate(val, function (err) {\n        if (err && (!schemaType.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n          if (schemaType.$isSingleNested && err instanceof ValidationError && schemaType.schema.options.storeSubdocValidationError === false) {\n            return --total || complete();\n          }\n\n          _this.invalidate(path, err, undefined, true);\n        }\n\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  };\n\n  const numPaths = paths.length;\n\n  for (let i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n\n  const parentPaths = new Map([]);\n\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n\n    const pieces = path.split('.');\n    let cur = pieces[0];\n\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = [];\n\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.push(path);\n    } else if (parentPaths.has(path)) {\n      ret.push(parentPaths.get(path));\n    }\n  }\n\n  return ret;\n}\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\n\nDocument.prototype.validateSync = function (pathsToValidate, options) {\n  const _this = this;\n\n  const hasValidateModifiedOnlyOption = options && typeof options === 'object' && 'validateModifiedOnly' in options;\n  let shouldValidateModifiedOnly;\n\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.schema.options.validateModifiedOnly;\n  }\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  } // only validate required fields when necessary\n\n\n  const pathDetails = _getPathsToValidate(this);\n\n  let paths = shouldValidateModifiedOnly ? pathDetails[0].filter(path => this.isModified(path)) : pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n\n  const validating = {};\n  paths.forEach(function (path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    const p = _this.schema.path(path);\n\n    if (!p) {\n      return;\n    }\n\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    const val = _this.$__getValue(path);\n\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path\n    });\n\n    if (err && (!p.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n      if (p.$isSingleNested && err instanceof ValidationError && p.schema.options.storeSubdocValidationError === false) {\n        return;\n      }\n\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n\n  _this.emit('validate', _this);\n\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\n\nDocument.prototype.invalidate = function (path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\n\nDocument.prototype.$markValid = function (path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n/*!\n * ignore\n */\n\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key); // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * ####Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String} path the field to check\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\n\nDocument.prototype.$isValid = function (path) {\n  return !this.$__.validationError || !this.$__.validationError.errors[path];\n};\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  this.$__.activePaths.map('init', 'modify', function (i) {\n    return _this.$__getValue(i);\n  }).filter(function (val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).forEach(function (array) {\n    let i = array.length;\n\n    while (i--) {\n      const doc = array[i];\n\n      if (!doc) {\n        continue;\n      }\n\n      doc.$__reset();\n    }\n\n    _this.$__.activePaths.init(array.$path());\n\n    array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n    array[arrayAtomicsSymbol] = {};\n  });\n  this.$__.activePaths.map('init', 'modify', function (i) {\n    return _this.$__getValue(i);\n  }).filter(function (val) {\n    return val && val.$isSingleNested;\n  }).forEach(function (doc) {\n    doc.$__reset();\n\n    _this.$__.activePaths.init(doc.$basePath);\n  }); // clear atomics\n\n  this.$__dirty().forEach(function (dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.states.modify),\n    default: Object.assign({}, this.$__.activePaths.states.default)\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.errors; // Clear 'dirty' cache\n\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.schema.requiredPaths().forEach(function (path) {\n    _this.$__.activePaths.require(path);\n  });\n  return this;\n};\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n  this.$__.validationError = this.$__.backup.validationError;\n  this.errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$__getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__dirty = function () {\n  const _this = this;\n\n  let all = this.$__.activePaths.map('modify', function (path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }); // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n\n  all = all.concat(this.$__.activePaths.map('default', function (path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  })); // Sort dirty paths in a flat hierarchy.\n\n  all.sort(function (a, b) {\n    return a.path < b.path ? -1 : a.path > b.path ? 1 : 0;\n  }); // Ignore \"foo.a\" if \"foo\" is dirty already.\n\n  const minimal = [];\n  let lastPath;\n  let top;\n  all.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n\n    if (lastPath == null || item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else if (top != null && top.value != null && top.value[arrayAtomicsSymbol] != null && top.value.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being modified.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top.value[arrayAtomicsSymbol] = {};\n      top.value[arrayAtomicsSymbol].$set = top.value;\n    }\n  });\n  top = lastPath = null;\n  return minimal;\n};\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__setSchema = function (schema) {\n  schema.plugin(idGetter, {\n    deduplicate: true\n  });\n  compile(schema.tree, this, undefined, schema.options); // Apply default getters if virtual doesn't have any (gh-6262)\n\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n\n  this.schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__getArrayPathsToValidate = function () {\n  DocumentArray || (DocumentArray = require('./types/documentarray')); // validate all document arrays.\n\n  return this.$__.activePaths.map('init', 'modify', function (i) {\n    return this.$__getValue(i);\n  }.bind(this)).filter(function (val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).reduce(function (seed, array) {\n    return seed.concat(array);\n  }, []).filter(function (doc) {\n    return doc;\n  });\n};\n/**\n * Get all subdocs (by bfs)\n *\n * @api private\n * @method $__getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__getAllSubdocs = function () {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else {\n        val = doc[path];\n      }\n    }\n\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function (seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function (seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n\n        seed = Object.keys(doc._doc).reduce(function (seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (val instanceof Document && val.$__isNested) {\n      seed = Object.keys(val).reduce(function (seed, path) {\n        return docReducer(val, seed, path);\n      }, seed);\n    }\n\n    return seed;\n  }\n\n  const _this = this;\n\n  const subDocs = Object.keys(this._doc).reduce(function (seed, path) {\n    return docReducer(_this, seed, path);\n  }, []);\n  return subDocs;\n};\n/*!\n * Runs queued functions\n */\n\n\nfunction applyQueue(doc) {\n  const q = doc.schema && doc.schema.callQueue;\n\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$toObject = function (options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = get(this, 'constructor.base.options.' + path, {});\n  const schemaOptions = get(this, 'schema.options', {}); // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n\n  defaultOptions = utils.options(defaultOptions, clone(baseOptions));\n  defaultOptions = utils.options(defaultOptions, clone(schemaOptions[path] || {})); // If options do not exist or is not an object, set it to empty object\n\n  options = utils.isPOJO(options) ? clone(options) : {};\n  options._calledWithOptions = options._calledWithOptions || clone(options);\n\n  if (!('flattenMaps' in options)) {\n    options.flattenMaps = defaultOptions.flattenMaps;\n  }\n\n  let _minimize;\n\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  } // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n\n\n  const cloneOptions = Object.assign(utils.clone(options), {\n    _isNested: true,\n    json: json,\n    minimize: _minimize\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate || get(options, '_parentOptions.depopulate', false); // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, cloneOptions);\n  } // merge default options with input options.\n\n\n  options = utils.options(defaultOptions, options);\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = true;\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = false; // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n\n  const originalTransform = options.transform;\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || options.getters && options.virtuals !== false) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.schema.options.versionKey) {\n    delete ret[this.schema.options.versionKey];\n  }\n\n  let transform = options.transform; // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || schemaOptions.toObject && transform) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = typeof options.transform === 'function' ? options.transform : opts.transform;\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n/**\n * Converts this document into a plain javascript object, ready for storage in MongoDB.\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters), defaults to false\n * - `aliases` apply all aliases if `virtuals=true`, defaults to true\n * - `virtuals` apply virtual getters (can override `getters` option), defaults to false\n * - `minimize` remove empty objects, defaults to true\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs, defaults to false\n * - `versionKey` whether to include the version key, defaults to true\n * - `flattenMaps` convert Maps to POJOs. Useful if you want to JSON.stringify() the result of toObject(), defaults to false\n * - `useProjection` set to `true` to omit fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this is behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.toObject = function (options) {\n  return this.$toObject(options);\n};\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\n\nfunction minimize(obj) {\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys;\n  let key;\n  let val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys ? obj : undefined;\n}\n/*!\n * Applies virtuals properties to `json`.\n */\n\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = get(toObjectOptions, 'aliases', true);\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i]; // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    } // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n\n\n    assignPath = path;\n\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n\n      assignPath = path.substr(options.path.length + 1);\n    }\n\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n\n    if (v === void 0) {\n      continue;\n    }\n\n    const plen = parts.length;\n    cur = json;\n\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\n\nfunction applyGetters(self, json, options) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n    const parts = path.split('.');\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n\n      if (ii === last) {\n        const val = self.get(path);\n        branch[part] = clone(val, options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n\n      cur = v;\n    }\n  }\n\n  return json;\n}\n/*!\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.get(path);\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      json[path] = transformedValue;\n    } else if (schematype.$embeddedSchemaType != null && typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const vals = [].concat(self.get(path));\n      const transform = schematype.$embeddedSchemaType.options.transform;\n\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n/*!\n * ignore\n */\n\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.toJSON = function (options) {\n  return this.$toObject(options, true);\n};\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.parent = function () {\n  return this.$__.parent;\n};\n/**\n * Helper for console.log\n *\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.inspect = function (options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n\n  const ret = this.toObject(opts);\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.toString = function () {\n  const ret = this.inspect();\n\n  if (typeof ret === 'string') {\n    return ret;\n  }\n\n  return inspect(ret);\n};\n/**\n * Returns true if the Document stores the same data as doc.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.equals = function (doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n\n  return tid && tid.equals ? tid.equals(docid) : tid === docid;\n};\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  const pop = this.$__.populate || (this.$__.populate = {});\n  const args = utils.args(arguments);\n  let fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  } // allow `doc.populate(callback)`\n\n\n  if (args.length) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  if (fn) {\n    const paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    let topLevelModel = this.constructor;\n\n    if (this.$__isNested) {\n      topLevelModel = this.$__[scopeSymbol].constructor;\n      const nestedPath = this.$__.nestedPath;\n      paths.forEach(function (populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    } // Use `$session()` by default if the document has an associated session\n    // See gh-6754\n\n\n    if (this.$session() != null) {\n      const session = this.$session();\n      paths.forEach(path => {\n        if (path.options == null) {\n          path.options = {\n            session: session\n          };\n          return;\n        }\n\n        if (!('session' in path.options)) {\n          path.options.session = session;\n        }\n      });\n    }\n\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n/**\n * Explicitly executes population and returns a promise. Useful for ES2015\n * integration.\n *\n * ####Example:\n *\n *     const promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *   // you can also use doc.execPopulate(options) as a shorthand for\n *   // doc.populate(options).execPopulate()\n *\n *\n * ####Example:\n *   const promise = doc.execPopulate({ path: 'company', select: 'employees' });\n *\n *   // summary\n *   promise.then(resolve,reject);\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @param {Function} [callback] optional callback. If specified, a promise will **not** be returned\n * @return {Promise} promise that resolves to the document when population is done\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.execPopulate = function (callback) {\n  const isUsingShorthand = callback != null && typeof callback !== 'function';\n\n  if (isUsingShorthand) {\n    return this.populate.apply(this, arguments).execPopulate();\n  }\n\n  return promiseOrCallback(callback, cb => {\n    this.populate(cb);\n  }, this.constructor.events);\n};\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, undefined is returned.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\n\nDocument.prototype.populated = function (path, val, options) {\n  // val and options are internal\n  if (val === null || val === void 0) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n\n    const v = this.$__.populated[path];\n\n    if (v) {\n      return v.value;\n    }\n\n    return undefined;\n  } // internal\n\n\n  if (val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n\n    return this.$__.populated[path];\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = {\n    value: val,\n    options: options\n  }; // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n\n  const pieces = path.split('.');\n\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.get(subpath);\n\n    if (subdoc != null && subdoc.$__ != null && this.populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.populated(rest, val, options); // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n\n      break;\n    }\n  }\n\n  return val;\n};\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.depopulate = function (path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = get(this, '$__.populated', {});\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.populated(key);\n\n      if (!populatedIds) {\n        continue;\n      }\n\n      delete populated[key];\n      this.$set(key, populatedIds);\n    }\n\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      this.$set(singlePath, populatedIds);\n    }\n  }\n\n  return this;\n};\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.$__fullPath = function (path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\n\nDocument.prototype.getChanges = function () {\n  const delta = this.$__delta();\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n/*!\n * Module exports.\n */\n\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/document.js"],"names":["EventEmitter","require","InternalCache","MongooseError","MixedSchema","ObjectExpectedError","ObjectParameterError","ParallelValidateError","Schema","StrictModeError","ValidationError","ValidatorError","VirtualType","promiseOrCallback","cleanModifiedSubpaths","compile","defineKey","flatten","get","getEmbeddedDiscriminatorPath","handleSpreadDoc","idGetter","isDefiningProjection","isExclusive","inspect","internalToObjectOptions","mpath","queryhelpers","utils","isPromise","clone","deepEqual","isMongooseObject","arrayAtomicsBackupSymbol","Symbol","arrayAtomicsSymbol","documentArrayParent","documentSchemaSymbol","getSymbol","populateModelSymbol","scopeSymbol","DocumentArray","MongooseArray","Embedded","specialProperties","Document","obj","fields","skipId","options","Object","assign","defaults","schema","_schema","isObject","instanceOfSchema","$__setSchema","arguments","$__","emitter","isNew","errors","undefined","$options","$locals","$op","strictMode","strict","selected","requiredPaths","path","activePaths","setMaxListeners","exclude","isPOJO","hasIncludedChildren","$__hasIncludedChildren","_doc","$__buildDoc","$__applyDefaults","$__original_set","$set","willInit","prototype","once","call","skipDefaults","_id","_this","keys","forEach","key","tree","applyQueue","each","emitterFn","apply","constructor","i","defineProperty","configurable","enumerable","writable","id","parts","split","c","part","push","join","doc","isBeforeSetters","pathsToSkip","paths","plen","length","def","curPath","p","type","indexOf","len","included","doc_","j","piece","defaultValue","$runBeforeSetters","getDefault","err","invalidate","default","filter","includes","ii","last","toBSON","toObject","init","opts","fn","$__init","$init","populated","String","item","isVirtual","getValue","_docs","_childDocs","child","parent","markArraySubdocsPopulated","emit","pieces","subpath","slice","rest","val","isMongooseDocumentArray","self","prefix","index","_init","$isRootDiscriminator","isSelected","_castNullish","intCache","wasPopulated","cast","e","message","value","isModified","update","args","unshift","query","$session","session","updateOne","callback","_pre","cb","_middleware","execPre","_post","execPost","exec","replaceOne","ownerDocument","subdocs","$__getAllSubdocs","overwrite","Array","from","Set","concat","versionKey","discriminatorKey","merge","adhoc","constructing","adhocs","pathtype","adhocPaths","interpretAsType","$__isNested","_","_skipMinimizeTopLevel","_handleIndex","$setCalled","add","pathName","pathType","isNativeObject","isMongooseType","$__path","ref","typeOnly","$isSingleNested","virtuals","transform","$__setValue","markModified","skipDocArrays","CastError","aliases","mixed","set","virtualpath","applySetters","cur","unmarkModified","$__getValue","pathToMark","getters","priorVal","priorDoc","$__set","$isMongooseArray","_markValidSubpaths","shouldSet","refMatches","model","modelName","baseModelName","refPath","didPopulate","popOpts","isArray","typeKey","_isManuallyPopulatedArray","$__fullPath","map","v","singleNestedPaths","$isMongooseDocumentArray","populatedPaths","populatedPath","_checkImmutableSubpaths","$markValid","isImmutableError","$originalErrorPath","instance","isDirectModified","el","$__shouldModify","states","shouldModify","isMongooseArray","_registerAtomic","__parentArray","modifiedPath","startsWith","ignore","l","next","has","Map","setValue","virtual","applyGetters","nested","applyVirtuals","adhocType","hasOwnProperty","scope","modify","pathsToScopes","$ignore","directModifiedPaths","$isEmpty","isEmptyOptions","minimize","_isEmpty","modifiedPaths","reduce","list","chains","chain","includeChildren","modified","childPath","isModifiedChild","some","mod","$isDefault","$isDeleted","isDeleted","isInit","inclusive","pathDot","isDirectSelected","validate","pathsToValidate","parallelValidate","validating","parentStack","conflictStack","stack","$__validate","error","events","_evaluateRequiredFunctions","originalRequiredValue","cachedRequired","_getPathsToValidate","skipSchemaValidators","addToPaths","subdoc","$basePath","delete","_pathType","_pushNestedArrayPaths","numElements","flattenOptions","skipArrays","pathToCheck","_v","flat","$isSchemaMap","hasValidateModifiedOnlyOption","shouldValidateModifiedOnly","validateModifiedOnly","_complete","validationError","errPath","pathDetails","_handlePathsToValidate","process","nextTick","s","hooks","validated","total","complete","validatePath","schemaType","$isValid","pop","doValidateOptions","doValidate","$isArrayValidatorError","storeSubdocValidationError","numPaths","_pathsToValidate","parentPaths","ret","validateSync","doValidateSync","kind","addError","schematype","$immutableSetter","oldVal","$__reset","reset","array","$path","$__dirty","dirt","backup","clear","$__undoReset","all","sort","a","b","minimal","lastPath","top","hasAtomics","plugin","deduplicate","_applyDefaultGetters","$__getArrayPathsToValidate","bind","seed","docReducer","_docReduce","subDocs","q","callQueue","pair","$__handleReject","handleReject","listeners","$toObject","json","defaultOptions","flattenDecimals","baseOptions","schemaOptions","_calledWithOptions","flattenMaps","_minimize","cloneOptions","_isNested","hasUserDefinedProperty","depopulate","_parentOptions","_skipSingleNestedGetters","gettersOptions","originalTransform","applySchemaTypeTransforms","useProjection","omitDeselectedFields","toJSON","xformed","hasKeys","Buffer","isBuffer","toObjectOptions","assignPath","substr","branch","transformedValue","throwErrorIfPromise","$embeddedSchemaType","vals","Error","applyPaths","custom","toString","equals","tid","docid","populate","res","populateOptions","object","topLevelModel","nestedPath","execPopulate","isUsingShorthand","populatedIds","virtualKeys","$$populatedVirtuals","virtualKey","singlePath","getChanges","delta","$__delta","changes","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst EventEmitter = require('events').EventEmitter;\nconst InternalCache = require('./internal');\nconst MongooseError = require('./error/index');\nconst MixedSchema = require('./schema/mixed');\nconst ObjectExpectedError = require('./error/objectExpected');\nconst ObjectParameterError = require('./error/objectParameter');\nconst ParallelValidateError = require('./error/parallelValidate');\nconst Schema = require('./schema');\nconst StrictModeError = require('./error/strict');\nconst ValidationError = require('./error/validation');\nconst ValidatorError = require('./error/validator');\nconst VirtualType = require('./virtualtype');\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\nconst compile = require('./helpers/document/compile').compile;\nconst defineKey = require('./helpers/document/compile').defineKey;\nconst flatten = require('./helpers/common').flatten;\nconst get = require('./helpers/get');\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\nconst idGetter = require('./plugins/idGetter');\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\nconst isExclusive = require('./helpers/projection/isExclusive');\nconst inspect = require('util').inspect;\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\nconst mpath = require('mpath');\nconst queryhelpers = require('./queryhelpers');\nconst utils = require('./utils');\nconst isPromise = require('./helpers/isPromise');\n\nconst clone = utils.clone;\nconst deepEqual = utils.deepEqual;\nconst isMongooseObject = utils.isMongooseObject;\n\nconst arrayAtomicsBackupSymbol = Symbol('mongoose.Array#atomicsBackup');\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\nconst getSymbol = require('./helpers/symbols').getSymbol;\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\n\nlet DocumentArray;\nlet MongooseArray;\nlet Embedded;\n\nconst specialProperties = utils.specialProperties;\n\n/**\n * The core Mongoose document constructor. You should not call this directly,\n * the Mongoose [Model constructor](./api.html#Model) calls this for you.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Object} [options] various configuration options for the document\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  if (typeof skipId === 'object' && skipId != null) {\n    options = skipId;\n    skipId = options.skipId;\n  }\n  options = Object.assign({}, options);\n  const defaults = get(options, 'defaults', true);\n  options.defaults = defaults;\n\n  // Support `browserDocument.js` syntax\n  if (this.schema == null) {\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ?\n      new Schema(fields) :\n      fields;\n    this.$__setSchema(_schema);\n    fields = skipId;\n    skipId = options;\n    options = arguments[4] || {};\n  }\n\n  this.$__ = new InternalCache;\n  this.$__.emitter = new EventEmitter();\n  this.isNew = 'isNew' in options ? options.isNew : true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n  this.$locals = {};\n  this.$op = null;\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  const schema = this.schema;\n\n  if (typeof fields === 'boolean' || fields === 'throw') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  const requiredPaths = schema.requiredPaths(true);\n  for (const path of requiredPaths) {\n    this.$__.activePaths.require(path);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n\n  let exclude = null;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n  if (utils.isPOJO(fields)) {\n    exclude = isExclusive(fields);\n  }\n\n  const hasIncludedChildren = exclude === false && fields ?\n    $__hasIncludedChildren(fields) :\n    {};\n\n  if (this._doc == null) {\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\n\n    // By default, defaults get applied **before** setting initial values\n    // Re: gh-6155\n    if (defaults) {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, true, {\n        isNew: this.isNew\n      });\n    }\n  }\n\n  if (obj) {\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    }\n  }\n\n  // Function defaults get applied **after** setting initial values so they\n  // see the full doc rather than an empty one, unless they opt out.\n  // Re: gh-3781, gh-6155\n  if (options.willInit && defaults) {\n    EventEmitter.prototype.once.call(this, 'init', () => {\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n        isNew: this.isNew\n      });\n    });\n  } else if (defaults) {\n    $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\n      isNew: this.isNew\n    });\n  }\n\n  this.$__._id = this._id;\n\n  if (!this.$__.strictMode && obj) {\n    const _this = this;\n    const keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n    'removeAllListeners', 'addListener'],\n  function(emitterFn) {\n    Document.prototype[emitterFn] = function() {\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n    };\n  });\n\nDocument.prototype.constructor = Document;\n\nfor (const i in EventEmitter.prototype) {\n  Document[i] = EventEmitter.prototype[i];\n}\n\n/**\n * The documents schema.\n *\n * @api public\n * @property schema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.schema;\n\n/**\n * Empty object that you can use for storing properties on the document. This\n * is handy for passing data to middleware without conflicting with Mongoose\n * internals.\n *\n * ####Example:\n *\n *     schema.pre('save', function() {\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\n *       this.$locals.wasNew = this.isNew;\n *     });\n *\n *     schema.post('save', function() {\n *       // Prints true if `isNew` was set before `save()`\n *       console.log(this.$locals.wasNew);\n *     });\n *\n * @api public\n * @property $locals\n * @memberOf Document\n * @instance\n */\n\nObject.defineProperty(Document.prototype, '$locals', {\n  configurable: false,\n  enumerable: false,\n  writable: true\n});\n\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.isNew;\n\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.errors;\n\n/**\n * A string containing the current operation that Mongoose is executing\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\n *\n * ####Example:\n *\n *     const doc = new Model({ name: 'test' });\n *     doc.$op; // null\n *\n *     const promise = doc.save();\n *     doc.$op; // 'save'\n *\n *     await promise;\n *     doc.$op; // null\n *\n * @api public\n * @property $op\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$op;\n\n/*!\n * ignore\n */\n\nfunction $__hasIncludedChildren(fields) {\n  const hasIncludedChildren = {};\n  const keys = Object.keys(fields);\n\n  for (const key of keys) {\n    const parts = key.split('.');\n    const c = [];\n\n    for (const part of parts) {\n      c.push(part);\n      hasIncludedChildren[c.join('.')] = 1;\n    }\n  }\n\n  return hasIncludedChildren;\n}\n\n/*!\n * ignore\n */\n\nfunction $__applyDefaults(doc, fields, skipId, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\n  const paths = Object.keys(doc.schema.paths);\n  const plen = paths.length;\n\n  for (let i = 0; i < plen; ++i) {\n    let def;\n    let curPath = '';\n    const p = paths[i];\n\n    if (p === '_id' && skipId) {\n      continue;\n    }\n\n    const type = doc.schema.paths[p];\n    const path = p.indexOf('.') === -1 ? [p] : p.split('.');\n    const len = path.length;\n    let included = false;\n    let doc_ = doc._doc;\n\n    for (let j = 0; j < len; ++j) {\n      if (doc_ == null) {\n        break;\n      }\n\n      const piece = path[j];\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (j === len - 1) {\n        if (doc_[piece] !== void 0) {\n          break;\n        }\n\n        if (typeof type.defaultValue === 'function') {\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\n            break;\n          }\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\n            break;\n          }\n        } else if (!isBeforeSetters) {\n          // Non-function defaults should always run **before** setters\n          continue;\n        }\n\n        if (pathsToSkip && pathsToSkip[curPath]) {\n          break;\n        }\n\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            try {\n              def = type.getDefault(doc, false);\n            } catch (err) {\n              doc.invalidate(p, err);\n              break;\n            }\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              doc.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          try {\n            def = type.getDefault(doc, false);\n          } catch (err) {\n            doc.invalidate(p, err);\n            break;\n          }\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            doc.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece];\n      }\n    }\n  }\n}\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\n  const doc = {};\n\n  const paths = Object.keys(this.schema.paths).\n    // Don't build up any paths that are underneath a map, we don't know\n    // what the keys will be\n    filter(p => !p.includes('$*'));\n  const plen = paths.length;\n  let ii = 0;\n\n  for (; ii < plen; ++ii) {\n    const p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    const path = p.split('.');\n    const len = path.length;\n    const last = len - 1;\n    let curPath = '';\n    let doc_ = doc;\n    let included = false;\n\n    for (let i = 0; i < len; ++i) {\n      const piece = path[i];\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i < last) {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  this._doc = doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject(internalToObjectOptions);\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb. Normally,\n * you do **not** need to call this function on your own.\n *\n * This function triggers `init` [middleware](/docs/middleware.html).\n * Note that `init` hooks are [synchronous](/docs/middleware.html#synchronous).\n *\n * @param {Object} doc document returned by mongo\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.$__init(doc, opts);\n\n  if (fn) {\n    fn(null, this);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__init = function(doc, opts) {\n  this.isNew = false;\n  this.$init = true;\n  opts = opts || {};\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id != null && opts.populated && opts.populated.length) {\n    const id = String(doc._id);\n    for (const item of opts.populated) {\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n\n      if (item._childDocs == null) {\n        continue;\n      }\n      for (const child of item._childDocs) {\n        if (child == null || child.$__ == null) {\n          continue;\n        }\n        child.$__.parent = this;\n      }\n    }\n  }\n\n  init(this, doc, this._doc, opts);\n\n  markArraySubdocsPopulated(this, opts.populated);\n\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n\n  this.$__._id = this._id;\n\n  return this;\n};\n\n/*!\n * If populating a path within a document array, make sure each\n * subdoc within the array knows its subpaths are populated.\n *\n * ####Example:\n *     const doc = await Article.findOne().populate('comments.author');\n *     doc.comments[0].populated('author'); // Should be set\n */\n\nfunction markArraySubdocsPopulated(doc, populated) {\n  if (doc._id == null || populated == null || populated.length === 0) {\n    return;\n  }\n\n  const id = String(doc._id);\n  for (const item of populated) {\n    if (item.isVirtual) {\n      continue;\n    }\n    const path = item.path;\n    const pieces = path.split('.');\n    for (let i = 0; i < pieces.length - 1; ++i) {\n      const subpath = pieces.slice(0, i + 1).join('.');\n      const rest = pieces.slice(i + 1).join('.');\n      const val = doc.get(subpath);\n      if (val == null) {\n        continue;\n      }\n\n      if (val.isMongooseDocumentArray) {\n        for (let j = 0; j < val.length; ++j) {\n          val[j].populated(rest, item._docs[id] == null ? [] : item._docs[id][j], item);\n        }\n        break;\n      }\n    }\n  }\n}\n\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\nfunction init(self, obj, doc, opts, prefix) {\n  prefix = prefix || '';\n\n  const keys = Object.keys(obj);\n  const len = keys.length;\n  let schema;\n  let path;\n  let i;\n  let index = 0;\n\n  while (index < len) {\n    _init(index++);\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.schema.path(path);\n\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (self.schema.$isRootDiscriminator && !self.isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isPOJO(obj[i])) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n      init(self, obj[i], doc[i], opts, path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = schema._castNullish(null);\n      } else if (obj[i] !== undefined) {\n        const intCache = obj[i].$__ || {};\n        const wasPopulated = intCache.wasPopulated || null;\n\n        if (schema && !wasPopulated) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.update = function update() {\n  const args = utils.args(arguments);\n  args.unshift({ _id: this._id });\n  const query = this.constructor.update.apply(this.constructor, args);\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  return query;\n};\n\n/**\n * Sends an updateOne command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.updateOne](#model_Model.updateOne)\n *\n * @see Model.updateOne #model_Model.updateOne\n * @param {Object} doc\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and the [Mongoose lean tutorial](/docs/tutorials/lean.html).\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\n  const query = this.constructor.updateOne({ _id: this._id }, doc, options);\n  query._pre(cb => {\n    this.constructor._middleware.execPre('updateOne', this, [this], cb);\n  });\n  query._post(cb => {\n    this.constructor._middleware.execPost('updateOne', this, [this], {}, cb);\n  });\n\n  if (this.$session() != null) {\n    if (!('session' in query.options)) {\n      query.options.session = this.$session();\n    }\n  }\n\n  if (callback != null) {\n    return query.exec(callback);\n  }\n\n  return query;\n};\n\n/**\n * Sends a replaceOne command with this document `_id` as the query selector.\n *\n * ####Valid options:\n *\n *  - same as in [Model.replaceOne](#model_Model.replaceOne)\n *\n * @see Model.replaceOne #model_Model.replaceOne\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.replaceOne = function replaceOne() {\n  const args = utils.args(arguments);\n  args.unshift({ _id: this._id });\n  return this.constructor.replaceOne.apply(this.constructor, args);\n};\n\n/**\n * Getter/setter around the session associated with this document. Used to\n * automatically set `session` if you `save()` a doc that you got from a\n * query with an associated session.\n *\n * ####Example:\n *\n *     const session = MyModel.startSession();\n *     const doc = await MyModel.findOne().session(session);\n *     doc.$session() === session; // true\n *     doc.$session(null);\n *     doc.$session() === null; // true\n *\n * If this is a top-level document, setting the session propagates to all child\n * docs.\n *\n * @param {ClientSession} [session] overwrite the current session\n * @return {ClientSession}\n * @method $session\n * @api public\n * @memberOf Document\n */\n\nDocument.prototype.$session = function $session(session) {\n  if (arguments.length === 0) {\n    return this.$__.session;\n  }\n  this.$__.session = session;\n\n  if (!this.ownerDocument) {\n    const subdocs = this.$__getAllSubdocs();\n    for (const child of subdocs) {\n      child.$session(session);\n    }\n  }\n\n  return session;\n};\n\n/**\n * Overwrite all values in this document with the values of `obj`, except\n * for immutable properties. Behaves similarly to `set()`, except for it\n * unsets all properties that aren't in `obj`.\n *\n * @param {Object} obj the object to overwrite this document with\n * @method overwrite\n * @name overwrite\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.overwrite = function overwrite(obj) {\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\n\n  for (const key of keys) {\n    if (key === '_id') {\n      continue;\n    }\n    // Explicitly skip version key\n    if (this.schema.options.versionKey && key === this.schema.options.versionKey) {\n      continue;\n    }\n    if (this.schema.options.discriminatorKey && key === this.schema.options.discriminatorKey) {\n      continue;\n    }\n    this.$set(key, obj[key]);\n  }\n\n  return this;\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @name $set\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (utils.isPOJO(type)) {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  const merge = options.merge;\n  const adhoc = type && type !== true;\n  const constructing = type === true;\n  let adhocs;\n  let keys;\n  let i = 0;\n  let pathtype;\n  let key;\n  let prefix;\n\n  const strict = 'strict' in options\n    ? options.strict\n    : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = this.schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path instanceof Document) {\n      if (path.$__isNested) {\n        path = path.toObject();\n      } else {\n        path = path._doc;\n      }\n    }\n\n    if (path == null) {\n      const _ = path;\n      path = val;\n      val = _;\n    } else {\n      prefix = val ? val + '.' : '';\n\n      keys = Object.keys(path);\n      const len = keys.length;\n\n      // `_skipMinimizeTopLevel` is because we may have deleted the top-level\n      // nested key to ensure key order.\n      const _skipMinimizeTopLevel = get(options, '_skipMinimizeTopLevel', false);\n      if (len === 0 && _skipMinimizeTopLevel) {\n        delete options._skipMinimizeTopLevel;\n        if (val) {\n          this.$set(val, {});\n        }\n        return this;\n      }\n\n      while (i < len) {\n        _handleIndex.call(this, i++);\n      }\n\n      return this;\n    }\n  } else {\n    this.$__.$setCalled.add(path);\n  }\n\n  function _handleIndex(i) {\n    key = keys[i];\n    const pathName = prefix + key;\n    pathtype = this.schema.pathType(pathName);\n\n    // On initial set, delete any nested keys if we're going to overwrite\n    // them to ensure we keep the user's key order.\n    if (type === true &&\n        !prefix &&\n        path[key] != null &&\n        pathtype === 'nested' &&\n        this._doc[key] != null &&\n        Object.keys(this._doc[key]).length === 0) {\n      delete this._doc[key];\n      // Make sure we set `{}` back even if we minimize re: gh-8565\n      options = Object.assign({}, options, { _skipMinimizeTopLevel: true });\n    }\n\n    if (typeof path[key] === 'object' &&\n        !utils.isNativeObject(path[key]) &&\n        !utils.isMongooseType(path[key]) &&\n        path[key] != null &&\n        pathtype !== 'virtual' &&\n        pathtype !== 'real' &&\n        pathtype !== 'adhocOrUndefined' &&\n        !(this.$__path(pathName) instanceof MixedSchema) &&\n        !(this.schema.paths[pathName] &&\n        this.schema.paths[pathName].options &&\n        this.schema.paths[pathName].options.ref)) {\n      this.$__.$setCalled.add(prefix + key);\n      this.$set(path[key], prefix + key, constructing, options);\n    } else if (strict) {\n      // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\n      if (constructing && path[key] === void 0 &&\n          this.get(pathName) !== void 0) {\n        return;\n      }\n\n      if (pathtype === 'adhocOrUndefined') {\n        pathtype = getEmbeddedDiscriminatorPath(this, pathName, { typeOnly: true });\n      }\n\n      if (pathtype === 'real' || pathtype === 'virtual') {\n        // Check for setting single embedded schema to document (gh-3535)\n        let p = path[key];\n        if (this.schema.paths[pathName] &&\n            this.schema.paths[pathName].$isSingleNested &&\n            path[key] instanceof Document) {\n          p = p.toObject({ virtuals: false, transform: false });\n        }\n        this.$set(prefix + key, p, constructing, options);\n      } else if (pathtype === 'nested' && path[key] instanceof Document) {\n        this.$set(prefix + key,\n          path[key].toObject({ transform: false }), constructing, options);\n      } else if (strict === 'throw') {\n        if (pathtype === 'nested') {\n          throw new ObjectExpectedError(key, path[key]);\n        } else {\n          throw new StrictModeError(key);\n        }\n      }\n    } else if (path[key] !== void 0) {\n      this.$set(prefix + key, path[key], constructing, options);\n    }\n  }\n\n  let pathType = this.schema.pathType(path);\n  if (pathType === 'adhocOrUndefined') {\n    pathType = getEmbeddedDiscriminatorPath(this, path, { typeOnly: true });\n  }\n\n  // Assume this is a Mongoose document that was copied into a POJO using\n  // `Object.assign()` or `{...doc}`\n  val = handleSpreadDoc(val);\n\n  if (pathType === 'nested' && val) {\n    if (typeof val === 'object' && val != null) {\n      if (!merge) {\n        this.$__setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        return this.$set(val, path, constructing);\n      }\n\n      const keys = Object.keys(val);\n      this.$__setValue(path, {});\n      for (const key of keys) {\n        this.$set(path + '.' + key, val[key], constructing);\n      }\n      this.markModified(path);\n      cleanModifiedSubpaths(this, path, { skipDocArrays: true });\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  let schema;\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\n\n  // Might need to change path for top-level alias\n  if (typeof this.schema.aliases[parts[0]] == 'string') {\n    parts[0] = this.schema.aliases[parts[0]];\n  }\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    let mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n\n      schema = this.schema.path(subpath);\n      if (schema == null) {\n        continue;\n      }\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n    }\n\n    if (schema == null) {\n      // Check for embedded discriminators\n      schema = getEmbeddedDiscriminatorPath(this, path);\n    }\n\n    if (!mixed && !schema) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  let cur = this._doc;\n  let curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for 6.x\n      if (!this.isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.$__getValue(curPath);\n    }\n  }\n\n  let pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      const subpath = parts.slice(0, i + 1).join('.');\n      if (this.get(subpath, null, { getters: false }) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  // if this doc is being constructed we should not trigger getters\n  const priorVal = (() => {\n    if (this.$__.$options.priorDoc != null) {\n      return this.$__.$options.priorDoc.$__getValue(path);\n    }\n    if (constructing) {\n      return void 0;\n    }\n    return this.$__getValue(path);\n  })();\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  }\n\n  // If overwriting a subdocument path, make sure to clear out\n  // any errors _before_ setting, so new errors that happen\n  // get persisted. Re: #9080\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\n    _markValidSubpaths(this, path);\n  }\n\n  if (schema.$isSingleNested && val != null && merge) {\n    if (val instanceof Document) {\n      val = val.toObject({ virtuals: false, transform: false });\n    }\n    const keys = Object.keys(val);\n    for (const key of keys) {\n      this.$set(path + '.' + key, val[key], constructing, options);\n    }\n\n    return this;\n  }\n\n  let shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    const refMatches = (() => {\n      if (schema.options == null) {\n        return false;\n      }\n      if (!(val instanceof Document)) {\n        return false;\n      }\n      const model = val.constructor;\n\n      // Check ref\n      const ref = schema.options.ref;\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\n        return true;\n      }\n\n      // Check refPath\n      const refPath = schema.options.refPath;\n      if (refPath == null) {\n        return false;\n      }\n      const modelName = val.get(refPath);\n      return modelName === model.modelName || modelName === model.baseModelName;\n    })();\n\n    let didPopulate = false;\n    if (refMatches && val instanceof Document) {\n      this.populated(path, val._id, { [populateModelSymbol]: val.constructor });\n      didPopulate = true;\n    }\n\n    let popOpts;\n    if (schema.options &&\n        Array.isArray(schema.options[this.schema.options.typeKey]) &&\n        schema.options[this.schema.options.typeKey].length &&\n        schema.options[this.schema.options.typeKey][0].ref &&\n        _isManuallyPopulatedArray(val, schema.options[this.schema.options.typeKey][0].ref)) {\n      if (this.ownerDocument) {\n        popOpts = { [populateModelSymbol]: val[0].constructor };\n        this.ownerDocument().populated(this.$__fullPath(path),\n          val.map(function(v) { return v._id; }), popOpts);\n      } else {\n        popOpts = { [populateModelSymbol]: val[0].constructor };\n        this.populated(path, val.map(function(v) { return v._id; }), popOpts);\n      }\n      didPopulate = true;\n    }\n\n    if (this.schema.singleNestedPaths[path] == null) {\n      // If this path is underneath a single nested schema, we'll call the setter\n      // later in `$__set()` because we don't take `_doc` when we iterate through\n      // a single nested doc. That's to make sure we get the correct context.\n      // Otherwise we would double-call the setter, see gh-7196.\n      val = schema.applySetters(val, this, false, priorVal);\n    }\n\n    if (schema.$isMongooseDocumentArray &&\n        Array.isArray(val) &&\n        val.length > 0 &&\n        val[0] != null &&\n        val[0].$__ != null &&\n        val[0].$__.populated != null) {\n      const populatedPaths = Object.keys(val[0].$__.populated);\n      for (const populatedPath of populatedPaths) {\n        this.populated(path + '.' + populatedPath,\n          val.map(v => v.populated(populatedPath)),\n          val[0].$__.populated[populatedPath].options);\n      }\n      didPopulate = true;\n    }\n\n    if (!didPopulate && this.$__.populated) {\n      // If this array partially contains populated documents, convert them\n      // all to ObjectIds re: #8443\n      if (Array.isArray(val) && this.$__.populated[path]) {\n        for (let i = 0; i < val.length; ++i) {\n          if (val[i] instanceof Document) {\n            val[i] = val[i]._id;\n          }\n        }\n      }\n      delete this.$__.populated[path];\n    }\n\n    if (schema.$isSingleNested && val != null) {\n      _checkImmutableSubpaths(val, schema, priorVal);\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\n      this.invalidate(path, e);\n    } else if (e instanceof MongooseError.CastError) {\n      this.invalidate(e.path, e);\n      if (e.$originalErrorPath) {\n        this.invalidate(path,\n          new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\n      }\n    } else {\n      this.invalidate(path,\n        new MongooseError.CastError(schema.instance, val, path, e));\n    }\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nfunction _isManuallyPopulatedArray(val, ref) {\n  if (!Array.isArray(val)) {\n    return false;\n  }\n  if (val.length === 0) {\n    return false;\n  }\n\n  for (const el of val) {\n    if (!(el instanceof Document)) {\n      return false;\n    }\n    const modelName = el.constructor.modelName;\n    if (modelName == null) {\n      return false;\n    }\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n * @method set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  }\n\n  // Re: the note about gh-7196, `val` is the raw value without casting or\n  // setters if the full path is under a single nested subdoc because we don't\n  // want to double run setters. So don't set it as modified. See gh-7264.\n  if (this.schema.singleNestedPaths[path] != null) {\n    return false;\n  }\n\n  if (val === void 0 && !this.isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (val === void 0 && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || this.get(path))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.states.default &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__set = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n\n  const shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts,\n    schema, val, priorVal);\n  const _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n\n      // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n      this.$__.activePaths.forEach(function(modifiedPath) {\n        if (modifiedPath.startsWith(path + '.')) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  let obj = this._doc;\n  let i = 0;\n  const l = parts.length;\n  let cur = '';\n\n  for (; i < l; i++) {\n    const next = i + 1;\n    const last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n    if (specialProperties.has(parts[i])) {\n      return;\n    }\n\n    if (last) {\n      if (obj instanceof Map) {\n        obj.set(parts[i], val);\n      } else {\n        obj[parts[i]] = val;\n      }\n    } else {\n      if (utils.isPOJO(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\nDocument.prototype.$__getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\nDocument.prototype.$__setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @param {Object} [options]\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\n * @api public\n */\n\nDocument.prototype.get = function(path, type, options) {\n  let adhoc;\n  options = options || {};\n  if (type) {\n    adhoc = this.schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  let schema = this.$__path(path);\n  if (schema == null) {\n    schema = this.schema.virtualpath(path);\n  }\n  if (schema instanceof MixedSchema) {\n    const virtual = this.schema.virtualpath(path);\n    if (virtual != null) {\n      schema = virtual;\n    }\n  }\n  const pieces = path.split('.');\n  let obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    if (schema.getters.length === 0) {\n      return void 0;\n    }\n    return schema.applyGetters(null, this);\n  }\n\n  // Might need to change path for top-level alias\n  if (typeof this.schema.aliases[pieces[0]] == 'string') {\n    pieces[0] = this.schema.aliases[pieces[0]];\n  }\n\n  for (let i = 0, l = pieces.length; i < l; i++) {\n    if (obj && obj._doc) {\n      obj = obj._doc;\n    }\n\n    if (obj == null) {\n      obj = void 0;\n    } else if (obj instanceof Map) {\n      obj = obj.get(pieces[i], { getters: false });\n    } else if (i === l - 1) {\n      obj = utils.getValue(pieces[i], obj);\n    } else {\n      obj = obj[pieces[i]];\n    }\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema != null && options.getters !== false) {\n    obj = schema.applyGetters(obj, this);\n  } else if (this.schema.nested[path] && options.virtuals) {\n    // Might need to apply virtuals if this is a nested path\n    return applyVirtuals(this, utils.clone(obj) || {}, { path: path });\n  }\n\n  return obj;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype[getSymbol] = Document.prototype.get;\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__path = function(path) {\n  const adhocs = this.$__.adhocPaths;\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save(); // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @instance\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been directly modified. A direct\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\n *\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\n * because a child of `a` was directly modified.\n *\n * ####Example\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\n *     const Model = mongoose.model('Test', schema);\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\n *\n *     const doc = await Model.findOne();\n *     doc.nested.bar = 'modified';\n *     doc.directModifiedPaths(); // ['nested.bar']\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\n *\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.directModifiedPaths = function() {\n  return Object.keys(this.$__.activePaths.states.modify);\n};\n\n/**\n * Returns true if the given path is nullish or only contains empty objects.\n * Useful for determining whether this subdoc will get stripped out by the\n * [minimize option](/docs/guide.html#minimize).\n *\n * ####Example:\n *     const schema = new Schema({ nested: { foo: String } });\n *     const Model = mongoose.model('Test', schema);\n *     const doc = new Model({});\n *     doc.$isEmpty('nested'); // true\n *     doc.nested.$isEmpty(); // true\n *\n *     doc.nested.foo = 'bar';\n *     doc.$isEmpty('nested'); // false\n *     doc.nested.$isEmpty(); // false\n *\n * @memberOf Document\n * @instance\n * @api public\n * @method $isEmpty\n * @return {Boolean}\n */\n\nDocument.prototype.$isEmpty = function(path) {\n  const isEmptyOptions = {\n    minimize: true,\n    virtuals: false,\n    getters: false,\n    transform: false\n  };\n\n  if (arguments.length > 0) {\n    const v = this.get(path);\n    if (v == null) {\n      return true;\n    }\n    if (typeof v !== 'object') {\n      return false;\n    }\n    if (utils.isPOJO(v)) {\n      return _isEmpty(v);\n    }\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\n  }\n\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\n};\n\nfunction _isEmpty(v) {\n  if (v == null) {\n    return true;\n  }\n  if (typeof v !== 'object' || Array.isArray(v)) {\n    return false;\n  }\n  for (const key of Object.keys(v)) {\n    if (!_isEmpty(v[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @param {Object} [options]\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function(options) {\n  options = options || {};\n  const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n  const _this = this;\n  return directModifiedPaths.reduce(function(list, path) {\n    const parts = path.split('.');\n    list = list.concat(parts.reduce(function(chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function(chain) {\n      return (list.indexOf(chain) === -1);\n    }));\n\n    if (!options.includeChildren) {\n      return list;\n    }\n\n    let cur = _this.get(path);\n    if (cur != null && typeof cur === 'object') {\n      if (cur._doc) {\n        cur = cur._doc;\n      }\n      if (Array.isArray(cur)) {\n        const len = cur.length;\n        for (let i = 0; i < len; ++i) {\n          if (list.indexOf(path + '.' + i) === -1) {\n            list.push(path + '.' + i);\n            if (cur[i] != null && cur[i].$__) {\n              const modified = cur[i].modifiedPaths();\n              for (const childPath of modified) {\n                list.push(path + '.' + i + '.' + childPath);\n              }\n            }\n          }\n        }\n      } else {\n        Object.keys(cur).\n          filter(function(key) {\n            return list.indexOf(path + '.' + key) === -1;\n          }).\n          forEach(function(key) {\n            list.push(path + '.' + key);\n          });\n      }\n    }\n\n    return list;\n  }, []);\n};\n\n/**\n * Returns true if this document was modified, else false.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths, modifiedPaths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n    const modified = modifiedPaths || this.modifiedPaths();\n    const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    const isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.startsWith(mod + '.');\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     const m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @instance\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  return (path in this.$__.activePaths.states.default);\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.$isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.$isDeleted(false);\n *       product.$isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  return (path in this.$__.activePaths.states.modify);\n};\n\n/**\n * Checks if `path` was initialized.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  return (path in this.$__.activePaths.states.init);\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    const paths = Object.keys(this.$__.selected);\n    let i = paths.length;\n    let inclusive = null;\n    let cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    i = paths.length;\n    const pathDot = path + '.';\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (cur.startsWith(pathDot)) {\n        return inclusive || cur !== pathDot;\n      }\n\n      if (pathDot.startsWith(cur + '.')) {\n        return inclusive;\n      }\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    const paths = Object.keys(this.$__.selected);\n    let i = paths.length;\n    let inclusive = null;\n    let cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\n * @param {Object} [options] internal options\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\n * @param {Function} [callback] optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\nDocument.prototype.validate = function(pathsToValidate, options, callback) {\n  let parallelValidate;\n  this.$op = 'validate';\n\n  if (this.ownerDocument != null) {\n    // Skip parallel validate check for subdocuments\n  } else if (this.$__.validating) {\n    parallelValidate = new ParallelValidateError(this, {\n      parentStack: options && options.parentStack,\n      conflictStack: this.$__.validating.stack\n    });\n  } else {\n    this.$__.validating = new ParallelValidateError(this, { parentStack: options && options.parentStack });\n  }\n\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = pathsToValidate;\n    pathsToValidate = null;\n  }\n\n  return promiseOrCallback(callback, cb => {\n    if (parallelValidate != null) {\n      return cb(parallelValidate);\n    }\n\n    this.$__validate(pathsToValidate, options, (error) => {\n      this.$op = null;\n      cb(error);\n    });\n  }, this.constructor.events);\n};\n\n/*!\n * ignore\n */\n\nfunction _evaluateRequiredFunctions(doc) {\n  Object.keys(doc.$__.activePaths.states.require).forEach(path => {\n    const p = doc.schema.path(path);\n\n    if (p != null && typeof p.originalRequiredValue === 'function') {\n      doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc);\n    }\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc) {\n  const skipSchemaValidators = {};\n\n  _evaluateRequiredFunctions(doc);\n\n  // only validate required fields when necessary\n  let paths = new Set(Object.keys(doc.$__.activePaths.states.require).filter(function(path) {\n    if (!doc.isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n    if (path in doc.$__.cachedRequired) {\n      return doc.$__.cachedRequired[path];\n    }\n    return true;\n  }));\n\n\n  Object.keys(doc.$__.activePaths.states.init).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.modify).forEach(addToPaths);\n  Object.keys(doc.$__.activePaths.states.default).forEach(addToPaths);\n  function addToPaths(p) { paths.add(p); }\n\n  const subdocs = doc.$__getAllSubdocs();\n  const modifiedPaths = doc.modifiedPaths();\n  for (const subdoc of subdocs) {\n    if (subdoc.$basePath) {\n      // Remove child paths for now, because we'll be validating the whole\n      // subdoc\n      for (const p of paths) {\n        if (p === null || p.startsWith(subdoc.$basePath + '.')) {\n          paths.delete(p);\n        }\n      }\n\n      if (doc.isModified(subdoc.$basePath, modifiedPaths) &&\n            !doc.isDirectModified(subdoc.$basePath) &&\n            !doc.$isDefault(subdoc.$basePath)) {\n        paths.add(subdoc.$basePath);\n\n        skipSchemaValidators[subdoc.$basePath] = true;\n      }\n    }\n  }\n\n  // from here on we're not removing items from paths\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  for (const path of paths) {\n    const _pathType = doc.schema.path(path);\n    if (!_pathType ||\n        !_pathType.$isMongooseArray ||\n        // To avoid potential performance issues, skip doc arrays whose children\n        // are not required. `getPositionalPathType()` may be slow, so avoid\n        // it unless we have a case of #6364\n        (_pathType.$isMongooseDocumentArray && !get(_pathType, 'schemaOptions.required'))) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    _pushNestedArrayPaths(val, paths, path);\n  }\n\n  function _pushNestedArrayPaths(val, paths, path) {\n    if (val != null) {\n      const numElements = val.length;\n      for (let j = 0; j < numElements; ++j) {\n        if (Array.isArray(val[j])) {\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\n        } else {\n          paths.add(path + '.' + j);\n        }\n      }\n    }\n  }\n\n  const flattenOptions = { skipArrays: true };\n  for (const pathToCheck of paths) {\n    if (doc.schema.nested[pathToCheck]) {\n      let _v = doc.$__getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.schema);\n      Object.keys(flat).forEach(addToPaths);\n    }\n  }\n\n\n  for (const path of paths) {\n    // Single nested paths (paths embedded under single nested subdocs) will\n    // be validated on their own when we call `validate()` on the subdoc itself.\n    // Re: gh-8468\n    if (doc.schema.singleNestedPaths.hasOwnProperty(path)) {\n      paths.delete(path);\n      continue;\n    }\n    const _pathType = doc.schema.path(path);\n    if (!_pathType || !_pathType.$isSchemaMap) {\n      continue;\n    }\n\n    const val = doc.$__getValue(path);\n    if (val == null) {\n      continue;\n    }\n    for (const key of val.keys()) {\n      paths.add(path + '.' + key);\n    }\n  }\n\n  paths = Array.from(paths);\n  return [paths, skipSchemaValidators];\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(pathsToValidate, options, callback) {\n  if (typeof pathsToValidate === 'function') {\n    callback = pathsToValidate;\n    options = null;\n    pathsToValidate = null;\n  } else if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.schema.options.validateModifiedOnly;\n  }\n\n  const _this = this;\n  const _complete = () => {\n    let validationError = this.$__.validationError;\n    this.$__.validationError = undefined;\n\n    if (shouldValidateModifiedOnly && validationError != null) {\n      // Remove any validation errors that aren't from modified paths\n      const errors = Object.keys(validationError.errors);\n      for (const errPath of errors) {\n        if (!this.isModified(errPath)) {\n          delete validationError.errors[errPath];\n        }\n      }\n      if (Object.keys(validationError.errors).length === 0) {\n        validationError = void 0;\n      }\n    }\n\n    this.$__.cachedRequired = {};\n    this.emit('validate', _this);\n    this.constructor.emit('validate', _this);\n\n    this.$__.validating = null;\n    if (validationError) {\n      for (const key in validationError.errors) {\n        // Make sure cast errors persist\n        if (!this[documentArrayParent] &&\n            validationError.errors[key] instanceof MongooseError.CastError) {\n          this.invalidate(key, validationError.errors[key]);\n        }\n      }\n\n      return validationError;\n    }\n  };\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this);\n  let paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n\n  if (paths.length === 0) {\n    return process.nextTick(function() {\n      const error = _complete();\n      if (error) {\n        return _this.schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback(null, _this);\n    });\n  }\n\n  const validated = {};\n  let total = 0;\n\n  const complete = function() {\n    const error = _complete();\n    if (error) {\n      return _this.schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback(null, _this);\n  };\n\n  const validatePath = function(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    process.nextTick(function() {\n      const schemaType = _this.schema.path(path);\n\n      if (!schemaType) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      let val = _this.$__getValue(path);\n\n      // If you `populate()` and get back a null value, required validators\n      // shouldn't fail (gh-8018). We should always fall back to the populated\n      // value.\n      let pop;\n      if (val == null && (pop = _this.populated(path))) {\n        val = pop;\n      }\n      const scope = path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n\n      const doValidateOptions = {\n        skipSchemaValidators: skipSchemaValidators[path],\n        path: path\n      };\n      schemaType.doValidate(val, function(err) {\n        if (err && (!schemaType.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n          if (schemaType.$isSingleNested &&\n              err instanceof ValidationError &&\n              schemaType.schema.options.storeSubdocValidationError === false) {\n            return --total || complete();\n          }\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope, doValidateOptions);\n    });\n  };\n\n  const numPaths = paths.length;\n  for (let i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _handlePathsToValidate(paths, pathsToValidate) {\n  const _pathsToValidate = new Set(pathsToValidate);\n  const parentPaths = new Map([]);\n  for (const path of pathsToValidate) {\n    if (path.indexOf('.') === -1) {\n      continue;\n    }\n    const pieces = path.split('.');\n    let cur = pieces[0];\n    for (let i = 1; i < pieces.length; ++i) {\n      // Since we skip subpaths under single nested subdocs to\n      // avoid double validation, we need to add back the\n      // single nested subpath if the user asked for it (gh-8626)\n      parentPaths.set(cur, path);\n      cur = cur + '.' + pieces[i];\n    }\n  }\n\n  const ret = [];\n  for (const path of paths) {\n    if (_pathsToValidate.has(path)) {\n      ret.push(path);\n    } else if (parentPaths.has(path)) {\n      ret.push(parentPaths.get(path));\n    }\n  }\n  return ret;\n}\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     const err = doc.validateSync();\n *     if (err) {\n *       handleError(err);\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @param {Object} [options] options for validation\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate, options) {\n  const _this = this;\n\n  const hasValidateModifiedOnlyOption = options &&\n      (typeof options === 'object') &&\n      ('validateModifiedOnly' in options);\n\n  let shouldValidateModifiedOnly;\n  if (hasValidateModifiedOnlyOption) {\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\n  } else {\n    shouldValidateModifiedOnly = this.schema.options.validateModifiedOnly;\n  }\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  // only validate required fields when necessary\n  const pathDetails = _getPathsToValidate(this);\n  let paths = shouldValidateModifiedOnly ?\n    pathDetails[0].filter((path) => this.isModified(path)) :\n    pathDetails[0];\n  const skipSchemaValidators = pathDetails[1];\n\n  if (Array.isArray(pathsToValidate)) {\n    paths = _handlePathsToValidate(paths, pathsToValidate);\n  }\n\n  const validating = {};\n\n  paths.forEach(function(path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    const p = _this.schema.path(path);\n    if (!p) {\n      return;\n    }\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    const val = _this.$__getValue(path);\n    const err = p.doValidateSync(val, _this, {\n      skipSchemaValidators: skipSchemaValidators[path],\n      path: path\n    });\n    if (err && (!p.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\n      if (p.$isSingleNested &&\n          err instanceof ValidationError &&\n          p.schema.options.storeSubdocValidationError === false) {\n        return;\n      }\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n\n  const err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (const key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @memberOf Document\n * @instance\n * @method $markValid\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction _markValidSubpaths(doc, path) {\n  if (!doc.$__.validationError) {\n    return;\n  }\n\n  const keys = Object.keys(doc.$__.validationError.errors);\n  for (const key of keys) {\n    if (key.startsWith(path + '.')) {\n      delete doc.$__.validationError.errors[key];\n    }\n  }\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\n    doc.$__.validationError = null;\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\n  const schema = schematype.schema;\n  if (schema == null) {\n    return;\n  }\n\n  for (const key of Object.keys(schema.paths)) {\n    const path = schema.paths[key];\n    if (path.$immutableSetter == null) {\n      continue;\n    }\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\n    // is intentional. That's because `$immutableSetter` compares its param\n    // to the current value.\n    path.$immutableSetter.call(subdoc, oldVal);\n  }\n}\n\n/**\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product = await product.save();\n *\n * If save is successful, the returned promise will fulfill with the document\n * saved.\n *\n * ####Example:\n *\n *     const newProduct = await product.save();\n *     newProduct === product; // true\n *\n * @param {Object} [options] options optional options\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\n * @param {Function} [fn] optional callback\n * @method save\n * @memberOf Document\n * @instance\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String} path the field to check\n * @method $isValid\n * @memberOf Document\n * @instance\n * @api private\n */\n\nDocument.prototype.$isValid = function(path) {\n  return !this.$__.validationError || !this.$__.validationError.errors[path];\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__reset = function reset() {\n  let _this = this;\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return _this.$__getValue(i);\n    })\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    })\n    .forEach(function(array) {\n      let i = array.length;\n      while (i--) {\n        const doc = array[i];\n        if (!doc) {\n          continue;\n        }\n        doc.$__reset();\n      }\n\n      _this.$__.activePaths.init(array.$path());\n\n      array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\n      array[arrayAtomicsSymbol] = {};\n    });\n\n  this.$__.activePaths.\n    map('init', 'modify', function(i) {\n      return _this.$__getValue(i);\n    }).\n    filter(function(val) {\n      return val && val.$isSingleNested;\n    }).\n    forEach(function(doc) {\n      doc.$__reset();\n      _this.$__.activePaths.init(doc.$basePath);\n    });\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol]) {\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\n      type[arrayAtomicsSymbol] = {};\n    }\n  });\n\n  this.$__.backup = {};\n  this.$__.backup.activePaths = {\n    modify: Object.assign({}, this.$__.activePaths.states.modify),\n    default: Object.assign({}, this.$__.activePaths.states.default)\n  };\n  this.$__.backup.validationError = this.$__.validationError;\n  this.$__.backup.errors = this.errors;\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__undoReset = function $__undoReset() {\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\n    return;\n  }\n\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\n\n  this.$__.validationError = this.$__.backup.validationError;\n  this.errors = this.$__.backup.errors;\n\n  for (const dirt of this.$__dirty()) {\n    const type = dirt.value;\n\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\n    }\n  }\n\n  for (const subdoc of this.$__getAllSubdocs()) {\n    subdoc.$__undoReset();\n  }\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__dirty = function() {\n  const _this = this;\n\n  let all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || _this.$__getValue(path) == null) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.$__getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  // Sort dirty paths in a flat hierarchy.\n  all.sort(function(a, b) {\n    return (a.path < b.path ? -1 : (a.path > b.path ? 1 : 0));\n  });\n\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  const minimal = [];\n  let lastPath;\n  let top;\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n    if (lastPath == null || item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else if (top != null &&\n        top.value != null &&\n        top.value[arrayAtomicsSymbol] != null &&\n        top.value.hasAtomics()) {\n      // special case for top level MongooseArrays\n      // the `top` array itself and a sub path of `top` are being modified.\n      // the only way to honor all of both modifications is through a $set\n      // of entire array.\n      top.value[arrayAtomicsSymbol] = {};\n      top.value[arrayAtomicsSymbol].$set = top.value;\n    }\n  });\n\n  top = lastPath = null;\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  schema.plugin(idGetter, { deduplicate: true });\n  compile(schema.tree, this, undefined, schema.options);\n\n  // Apply default getters if virtual doesn't have any (gh-6262)\n  for (const key of Object.keys(schema.virtuals)) {\n    schema.virtuals[key]._applyDefaultGetters();\n  }\n\n  this.schema = schema;\n  this[documentSchemaSymbol] = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n    .map('init', 'modify', function(i) {\n      return this.$__getValue(i);\n    }.bind(this))\n    .filter(function(val) {\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n    }).reduce(function(seed, array) {\n      return seed.concat(array);\n    }, [])\n    .filter(function(doc) {\n      return doc;\n    });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @api private\n * @method $__getAllSubdocs\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__getAllSubdocs = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    let val = doc;\n    if (path) {\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\n        val = doc._doc[path];\n      } else {\n        val = doc[path];\n      }\n    }\n    if (val instanceof Embedded) {\n      seed.push(val);\n    } else if (val instanceof Map) {\n      seed = Array.from(val.keys()).reduce(function(seed, path) {\n        return docReducer(val.get(path), seed, null);\n      }, seed);\n    } else if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    } else if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n      });\n    } else if (val instanceof Document && val.$__isNested) {\n      seed = Object.keys(val).reduce(function(seed, path) {\n        return docReducer(val, seed, path);\n      }, seed);\n    }\n    return seed;\n  }\n\n  const _this = this;\n  const subDocs = Object.keys(this._doc).reduce(function(seed, path) {\n    return docReducer(_this, seed, path);\n  }, []);\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  const q = doc.schema && doc.schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n\n  for (const pair of q) {\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  let defaultOptions = {\n    transform: true,\n    flattenDecimals: true\n  };\n\n  const path = json ? 'toJSON' : 'toObject';\n  const baseOptions = get(this, 'constructor.base.options.' + path, {});\n  const schemaOptions = get(this, 'schema.options', {});\n  // merge base default options with Schema's set default options if available.\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\n  defaultOptions = utils.options(defaultOptions, clone(baseOptions));\n  defaultOptions = utils.options(defaultOptions, clone(schemaOptions[path] || {}));\n\n  // If options do not exist or is not an object, set it to empty object\n  options = utils.isPOJO(options) ? clone(options) : {};\n  options._calledWithOptions = options._calledWithOptions || clone(options);\n\n  if (!('flattenMaps' in options)) {\n    options.flattenMaps = defaultOptions.flattenMaps;\n  }\n\n  let _minimize;\n  if (options._calledWithOptions.minimize != null) {\n    _minimize = options.minimize;\n  } else if (defaultOptions.minimize != null) {\n    _minimize = defaultOptions.minimize;\n  } else {\n    _minimize = schemaOptions.minimize;\n  }\n\n  // The original options that will be passed to `clone()`. Important because\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\n  // need the original options the user passed in, plus `_isNested` and\n  // `_parentOptions` for checking whether we need to depopulate.\n  const cloneOptions = Object.assign(utils.clone(options), {\n    _isNested: true,\n    json: json,\n    minimize: _minimize\n  });\n\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\n    cloneOptions.getters = options.getters;\n  }\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\n    cloneOptions.virtuals = options.virtuals;\n  }\n\n  const depopulate = options.depopulate ||\n    get(options, '_parentOptions.depopulate', false);\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, cloneOptions);\n  }\n\n  // merge default options with input options.\n  options = utils.options(defaultOptions, options);\n  options._isNested = true;\n  options.json = json;\n  options.minimize = _minimize;\n\n  cloneOptions._parentOptions = options;\n  cloneOptions._skipSingleNestedGetters = true;\n\n  const gettersOptions = Object.assign({}, cloneOptions);\n  gettersOptions._skipSingleNestedGetters = false;\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  const originalTransform = options.transform;\n\n  let ret = clone(this._doc, cloneOptions) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, gettersOptions);\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || (options.getters && options.virtuals !== false)) {\n    applyVirtuals(this, ret, gettersOptions, options);\n  }\n\n  if (options.versionKey === false && this.schema.options.versionKey) {\n    delete ret[this.schema.options.versionKey];\n  }\n\n  let transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform) {\n    applySchemaTypeTransforms(this, ret);\n  }\n\n  if (options.useProjection) {\n    omitDeselectedFields(this, ret);\n  }\n\n  if (transform === true || (schemaOptions.toObject && transform)) {\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    const xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain javascript object, ready for storage in MongoDB.\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters), defaults to false\n * - `aliases` apply all aliases if `virtuals=true`, defaults to true\n * - `virtuals` apply virtual getters (can override `getters` option), defaults to false\n * - `minimize` remove empty objects, defaults to true\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs, defaults to false\n * - `versionKey` whether to include the version key, defaults to true\n * - `flattenMaps` convert Maps to POJOs. Useful if you want to JSON.stringify() the result of toObject(), defaults to false\n * - `useProjection` set to `true` to omit fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\n * to [subdocuments](/docs/subdocs.html) in addition to the top-level document.\n * Similarly, `transform: false` skips transforms for all subdocuments.\n * Note that this is behavior is different for transforms defined in the schema:\n * if you define a transform in `schema.options.toObject.transform`, that transform\n * will **not** apply to subdocuments.\n *\n *     const memberSchema = new Schema({ name: String, email: String });\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\n *     const Group = mongoose.model('Group', groupSchema);\n *\n *     const doc = new Group({\n *       name: 'Engineering',\n *       email: 'dev@mongoosejs.io',\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\n *     });\n *\n *     // Removes `email` from both top-level document **and** array elements\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\n *\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\n * @param {Boolean} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\nfunction minimize(obj) {\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys;\n  let key;\n  let val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys\n    ? obj\n    : undefined;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n */\n\nfunction applyVirtuals(self, json, options, toObjectOptions) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.virtuals);\n  let i = paths.length;\n  const numPaths = i;\n  let path;\n  let assignPath;\n  let cur = self._doc;\n  let v;\n  const aliases = get(toObjectOptions, 'aliases', true);\n\n  if (!cur) {\n    return json;\n  }\n\n  options = options || {};\n  for (i = 0; i < numPaths; ++i) {\n    path = paths[i];\n\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\n      continue;\n    }\n\n    // We may be applying virtuals to a nested object, for example if calling\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\n    // will be a trailing substring of the `path`.\n    assignPath = path;\n    if (options.path != null) {\n      if (!path.startsWith(options.path + '.')) {\n        continue;\n      }\n      assignPath = path.substr(options.path.length + 1);\n    }\n    const parts = assignPath.split('.');\n    v = clone(self.get(path), options);\n    if (v === void 0) {\n      continue;\n    }\n    const plen = parts.length;\n    cur = json;\n    for (let j = 0; j < plen - 1; ++j) {\n      cur[parts[j]] = cur[parts[j]] || {};\n      cur = cur[parts[j]];\n    }\n    cur[parts[plen - 1]] = v;\n  }\n\n  return json;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\nfunction applyGetters(self, json, options) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.paths);\n  let i = paths.length;\n  let path;\n  let cur = self._doc;\n  let v;\n\n  if (!cur) {\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    const parts = path.split('.');\n    const plen = parts.length;\n    const last = plen - 1;\n    let branch = json;\n    let part;\n    cur = self._doc;\n\n    if (!self.isSelected(path)) {\n      continue;\n    }\n\n    for (let ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        const val = self.get(path);\n        branch[part] = clone(val, options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/*!\n * Applies schema type transforms to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @return {Object} `json`\n */\n\nfunction applySchemaTypeTransforms(self, json) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  for (const path of paths) {\n    const schematype = schema.paths[path];\n    if (typeof schematype.options.transform === 'function') {\n      const val = self.get(path);\n      const transformedValue = schematype.options.transform.call(self, val);\n      throwErrorIfPromise(path, transformedValue);\n      json[path] = transformedValue;\n    } else if (schematype.$embeddedSchemaType != null &&\n        typeof schematype.$embeddedSchemaType.options.transform === 'function') {\n      const vals = [].concat(self.get(path));\n      const transform = schematype.$embeddedSchemaType.options.transform;\n      for (let i = 0; i < vals.length; ++i) {\n        const transformedValue = transform.call(self, vals[i]);\n        vals[i] = transformedValue;\n        throwErrorIfPromise(path, transformedValue);\n      }\n\n      json[path] = vals;\n    }\n  }\n\n  return json;\n}\n\nfunction throwErrorIfPromise(path, transformedValue) {\n  if (isPromise(transformedValue)) {\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction omitDeselectedFields(self, json) {\n  const schema = self.schema;\n  const paths = Object.keys(schema.paths || {});\n  const cur = self._doc;\n\n  if (!cur) {\n    return json;\n  }\n\n  let selected = self.$__.selected;\n  if (selected === void 0) {\n    selected = {};\n    queryhelpers.applyPaths(selected, schema);\n  }\n  if (selected == null || Object.keys(selected).length === 0) {\n    return json;\n  }\n\n  for (const path of paths) {\n    if (selected[path] != null && !selected[path]) {\n      delete json[path];\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n/**\n * If this document is a subdocument or populated document, returns the document's\n * parent. Returns `undefined` otherwise.\n *\n * @api public\n * @method parent\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.parent = function() {\n  return this.$__.parent;\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method inspect\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.inspect = function(options) {\n  const isPOJO = utils.isPOJO(options);\n  let opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n  }\n  const ret = this.toObject(opts);\n\n  if (ret == null) {\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\n    // prints out null this can cause some serious confusion. See gh-7942.\n    return 'MongooseDocument { ' + ret + ' }';\n  }\n\n  return ret;\n};\n\nif (inspect.custom) {\n  /*!\n  * Avoid Node deprecation warning DEP0079\n  */\n\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\n}\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.toString = function() {\n  const ret = this.inspect();\n  if (typeof ret === 'string') {\n    return ret;\n  }\n  return inspect(ret);\n};\n\n/**\n * Returns true if the Document stores the same data as doc.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  const tid = this.$__getValue('_id');\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n    ? tid.equals(docid)\n    : tid === docid;\n};\n\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  const pop = this.$__.populate || (this.$__.populate = {});\n  const args = utils.args(arguments);\n  let fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  }\n\n  // allow `doc.populate(callback)`\n  if (args.length) {\n    // use hash to remove duplicate paths\n    const res = utils.populate.apply(null, args);\n    for (const populateOptions of res) {\n      pop[populateOptions.path] = populateOptions;\n    }\n  }\n\n  if (fn) {\n    const paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    let topLevelModel = this.constructor;\n    if (this.$__isNested) {\n      topLevelModel = this.$__[scopeSymbol].constructor;\n      const nestedPath = this.$__.nestedPath;\n      paths.forEach(function(populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    }\n\n    // Use `$session()` by default if the document has an associated session\n    // See gh-6754\n    if (this.$session() != null) {\n      const session = this.$session();\n      paths.forEach(path => {\n        if (path.options == null) {\n          path.options = { session: session };\n          return;\n        }\n        if (!('session' in path.options)) {\n          path.options.session = session;\n        }\n      });\n    }\n\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n\n/**\n * Explicitly executes population and returns a promise. Useful for ES2015\n * integration.\n *\n * ####Example:\n *\n *     const promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *   // you can also use doc.execPopulate(options) as a shorthand for\n *   // doc.populate(options).execPopulate()\n *\n *\n * ####Example:\n *   const promise = doc.execPopulate({ path: 'company', select: 'employees' });\n *\n *   // summary\n *   promise.then(resolve,reject);\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @param {Function} [callback] optional callback. If specified, a promise will **not** be returned\n * @return {Promise} promise that resolves to the document when population is done\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.execPopulate = function(callback) {\n  const isUsingShorthand = callback != null && typeof callback !== 'function';\n  if (isUsingShorthand) {\n    return this.populate.apply(this, arguments).execPopulate();\n  }\n\n  return promiseOrCallback(callback, cb => {\n    this.populate(cb);\n  }, this.constructor.events);\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, undefined is returned.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @memberOf Document\n * @instance\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n  if (val === null || val === void 0) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    const v = this.$__.populated[path];\n    if (v) {\n      return v.value;\n    }\n    return undefined;\n  }\n\n  // internal\n  if (val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    return this.$__.populated[path];\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = { value: val, options: options };\n\n  // If this was a nested populate, make sure each populated doc knows\n  // about its populated children (gh-7685)\n  const pieces = path.split('.');\n  for (let i = 0; i < pieces.length - 1; ++i) {\n    const subpath = pieces.slice(0, i + 1).join('.');\n    const subdoc = this.get(subpath);\n    if (subdoc != null && subdoc.$__ != null && this.populated(subpath)) {\n      const rest = pieces.slice(i + 1).join('.');\n      subdoc.populated(rest, val, options);\n      // No need to continue because the above recursion should take care of\n      // marking the rest of the docs as populated\n      break;\n    }\n  }\n\n  return val;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n\n  let populatedIds;\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\n  const populated = get(this, '$__.populated', {});\n\n  if (arguments.length === 0) {\n    // Depopulate all\n    for (const virtualKey of virtualKeys) {\n      delete this.$$populatedVirtuals[virtualKey];\n      delete this._doc[virtualKey];\n      delete populated[virtualKey];\n    }\n\n    const keys = Object.keys(populated);\n\n    for (const key of keys) {\n      populatedIds = this.populated(key);\n      if (!populatedIds) {\n        continue;\n      }\n      delete populated[key];\n      this.$set(key, populatedIds);\n    }\n    return this;\n  }\n\n  for (const singlePath of path) {\n    populatedIds = this.populated(singlePath);\n    delete populated[singlePath];\n\n    if (virtualKeys.indexOf(singlePath) !== -1) {\n      delete this.$$populatedVirtuals[singlePath];\n      delete this._doc[singlePath];\n    } else if (populatedIds) {\n      this.$set(singlePath, populatedIds);\n    }\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/**\n * Returns the changes that happened to the document\n * in the format that will be sent to MongoDB.\n *\n * #### Example:\n *\n *     const userSchema = new Schema({\n *       name: String,\n *       age: Number,\n *       country: String\n *     });\n *     const User = mongoose.model('User', userSchema);\n *     const user = await User.create({\n *       name: 'Hafez',\n *       age: 25,\n *       country: 'Egypt'\n *     });\n *\n *     // returns an empty object, no changes happened yet\n *     user.getChanges(); // { }\n *\n *     user.country = undefined;\n *     user.age = 26;\n *\n *     user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\n *\n *     await user.save();\n *\n *     user.getChanges(); // { }\n *\n * Modifying the object that `getChanges()` returns does not affect the document's\n * change tracking state. Even if you `delete user.getChanges().$set`, Mongoose\n * will still send a `$set` to the server.\n *\n * @return {Object}\n * @api public\n * @method getChanges\n * @memberOf Document\n * @instance\n */\n\nDocument.prototype.getChanges = function() {\n  const delta = this.$__delta();\n\n  const changes = delta ? delta[1] : {};\n  return changes;\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n"]},"metadata":{},"sourceType":"script"}