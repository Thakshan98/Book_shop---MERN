{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n/**\n * The options defined on a Number schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ count: Number });\n *     schema.path('count').options; // SchemaNumberOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaNumberOptions\n */\n\n\nclass SchemaNumberOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n/**\n * If set, Mongoose adds a validator that checks that this path is at least the\n * given `min`.\n *\n * @api public\n * @property min\n * @memberOf SchemaNumberOptions\n * @type Number\n * @instance\n */\n\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'min', opts);\n/**\n * If set, Mongoose adds a validator that checks that this path is less than the\n * given `max`.\n *\n * @api public\n * @property max\n * @memberOf SchemaNumberOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'max', opts);\n/**\n * If set, Mongoose adds a validator that checks that this path is strictly\n * equal to one of the given values.\n *\n * ####Example:\n *     const schema = new Schema({\n *       favoritePrime: {\n *         type: Number,\n *         enum: [3, 5, 7]\n *       }\n *     });\n *     schema.path('favoritePrime').options.enum; // [3, 5, 7]\n *\n * @api public\n * @property enum\n * @memberOf SchemaNumberOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'enum', opts);\n/*!\n * ignore\n */\n\nmodule.exports = SchemaNumberOptions;","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/options/SchemaNumberOptions.js"],"names":["SchemaTypeOptions","require","SchemaNumberOptions","opts","Object","defineProperty","prototype","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;AAEA;;;;;;;;;;;;;;AAaA,MAAMC,mBAAN,SAAkCF,iBAAlC,CAAoD;;AAEpD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAD,CAApB;AAEA;;;;;;;;;;;;AAWAG,MAAM,CAACC,cAAP,CAAsBH,mBAAmB,CAACI,SAA1C,EAAqD,KAArD,EAA4DH,IAA5D;AAEA;;;;;;;;;;;AAWAC,MAAM,CAACC,cAAP,CAAsBH,mBAAmB,CAACI,SAA1C,EAAqD,KAArD,EAA4DH,IAA5D;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAC,MAAM,CAACC,cAAP,CAAsBH,mBAAmB,CAACI,SAA1C,EAAqD,MAArD,EAA6DH,IAA7D;AAEA;;;;AAIAI,MAAM,CAACC,OAAP,GAAiBN,mBAAjB","sourcesContent":["'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\n * The options defined on a Number schematype.\n *\n * ####Example:\n *\n *     const schema = new Schema({ count: Number });\n *     schema.path('count').options; // SchemaNumberOptions instance\n *\n * @api public\n * @inherits SchemaTypeOptions\n * @constructor SchemaNumberOptions\n */\n\nclass SchemaNumberOptions extends SchemaTypeOptions {}\n\nconst opts = require('./propertyOptions');\n\n/**\n * If set, Mongoose adds a validator that checks that this path is at least the\n * given `min`.\n *\n * @api public\n * @property min\n * @memberOf SchemaNumberOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'min', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is less than the\n * given `max`.\n *\n * @api public\n * @property max\n * @memberOf SchemaNumberOptions\n * @type Number\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'max', opts);\n\n/**\n * If set, Mongoose adds a validator that checks that this path is strictly\n * equal to one of the given values.\n *\n * ####Example:\n *     const schema = new Schema({\n *       favoritePrime: {\n *         type: Number,\n *         enum: [3, 5, 7]\n *       }\n *     });\n *     schema.path('favoritePrime').options.enum; // [3, 5, 7]\n *\n * @api public\n * @property enum\n * @memberOf SchemaNumberOptions\n * @type Array\n * @instance\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'enum', opts);\n\n/*!\n * ignore\n */\n\nmodule.exports = SchemaNumberOptions;"]},"metadata":{},"sourceType":"script"}