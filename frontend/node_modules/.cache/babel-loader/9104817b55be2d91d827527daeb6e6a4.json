{"ast":null,"code":"'use strict';\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\n\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\n\nconst SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  set(option, value) {\n    return SchemaType.set(option, value);\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    if (init) {\n      const map = new MongooseMap({}, this.path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          map.$init(key, map.$__schemaType.cast(val.get(key), doc, true));\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          map.$init(key, map.$__schemaType.cast(val[key], doc, true));\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, this.path, doc, this.$__schemaType);\n  }\n\n  clone() {\n    const schematype = super.clone();\n\n    if (this.$__schemaType != null) {\n      schematype.$__schemaType = this.$__schemaType.clone();\n    }\n\n    return schematype;\n  }\n\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\nMap.defaultOptions = {};\nmodule.exports = Map;","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/schema/map.js"],"names":["MongooseMap","require","SchemaMapOptions","SchemaType","Map","constructor","key","options","$isSchemaMap","set","option","value","cast","val","doc","init","map","path","$__schemaType","global","keys","$init","get","Object","clone","schematype","prototype","OptionsConstructor","defaultOptions","module","exports"],"mappings":"AAAA;AAEA;;;;AAIA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAAD,CAAhC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,eAAD,CAA1B;AACA;;;;;AAIA,MAAMG,GAAN,SAAkBD,UAAlB,CAA6B;AAC3BE,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAN,EAAe;AACxB,UAAMD,GAAN,EAAWC,OAAX,EAAoB,KAApB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACD;;AAEDC,EAAAA,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgB;AACjB,WAAOR,UAAU,CAACM,GAAX,CAAeC,MAAf,EAAuBC,KAAvB,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiB;AACnB,QAAIF,GAAG,YAAYb,WAAnB,EAAgC;AAC9B,aAAOa,GAAP;AACD;;AAED,QAAIE,IAAJ,EAAU;AACR,YAAMC,GAAG,GAAG,IAAIhB,WAAJ,CAAgB,EAAhB,EAAoB,KAAKiB,IAAzB,EAA+BH,GAA/B,EAAoC,KAAKI,aAAzC,CAAZ;;AAEA,UAAIL,GAAG,YAAYM,MAAM,CAACf,GAA1B,EAA+B;AAC7B,aAAK,MAAME,GAAX,IAAkBO,GAAG,CAACO,IAAJ,EAAlB,EAA8B;AAC5BJ,UAAAA,GAAG,CAACK,KAAJ,CAAUf,GAAV,EAAeU,GAAG,CAACE,aAAJ,CAAkBN,IAAlB,CAAuBC,GAAG,CAACS,GAAJ,CAAQhB,GAAR,CAAvB,EAAqCQ,GAArC,EAA0C,IAA1C,CAAf;AACD;AACF,OAJD,MAIO;AACL,aAAK,MAAMR,GAAX,IAAkBiB,MAAM,CAACH,IAAP,CAAYP,GAAZ,CAAlB,EAAoC;AAClCG,UAAAA,GAAG,CAACK,KAAJ,CAAUf,GAAV,EAAeU,GAAG,CAACE,aAAJ,CAAkBN,IAAlB,CAAuBC,GAAG,CAACP,GAAD,CAA1B,EAAiCQ,GAAjC,EAAsC,IAAtC,CAAf;AACD;AACF;;AAED,aAAOE,GAAP;AACD;;AAED,WAAO,IAAIhB,WAAJ,CAAgBa,GAAhB,EAAqB,KAAKI,IAA1B,EAAgCH,GAAhC,EAAqC,KAAKI,aAA1C,CAAP;AACD;;AAEDM,EAAAA,KAAK,GAAG;AACN,UAAMC,UAAU,GAAG,MAAMD,KAAN,EAAnB;;AAEA,QAAI,KAAKN,aAAL,IAAsB,IAA1B,EAAgC;AAC9BO,MAAAA,UAAU,CAACP,aAAX,GAA2B,KAAKA,aAAL,CAAmBM,KAAnB,EAA3B;AACD;;AACD,WAAOC,UAAP;AACD;;AAzC0B;;AA4C7BrB,GAAG,CAACsB,SAAJ,CAAcC,kBAAd,GAAmCzB,gBAAnC;AAEAE,GAAG,CAACwB,cAAJ,GAAqB,EAArB;AAEAC,MAAM,CAACC,OAAP,GAAiB1B,GAAjB","sourcesContent":["'use strict';\n\n/*!\n * ignore\n */\n\nconst MongooseMap = require('../types/map');\nconst SchemaMapOptions = require('../options/SchemaMapOptions');\nconst SchemaType = require('../schematype');\n/*!\n * ignore\n */\n\nclass Map extends SchemaType {\n  constructor(key, options) {\n    super(key, options, 'Map');\n    this.$isSchemaMap = true;\n  }\n\n  set(option, value) {\n    return SchemaType.set(option, value);\n  }\n\n  cast(val, doc, init) {\n    if (val instanceof MongooseMap) {\n      return val;\n    }\n\n    if (init) {\n      const map = new MongooseMap({}, this.path, doc, this.$__schemaType);\n\n      if (val instanceof global.Map) {\n        for (const key of val.keys()) {\n          map.$init(key, map.$__schemaType.cast(val.get(key), doc, true));\n        }\n      } else {\n        for (const key of Object.keys(val)) {\n          map.$init(key, map.$__schemaType.cast(val[key], doc, true));\n        }\n      }\n\n      return map;\n    }\n\n    return new MongooseMap(val, this.path, doc, this.$__schemaType);\n  }\n\n  clone() {\n    const schematype = super.clone();\n\n    if (this.$__schemaType != null) {\n      schematype.$__schemaType = this.$__schemaType.clone();\n    }\n    return schematype;\n  }\n}\n\nMap.prototype.OptionsConstructor = SchemaMapOptions;\n\nMap.defaultOptions = {};\n\nmodule.exports = Map;\n"]},"metadata":{},"sourceType":"script"}