{"ast":null,"code":"/*!\n * Module dependencies.\n */\n'use strict';\n\nconst SchemaType = require('../schematype');\n\nconst symbols = require('./symbols');\n\nconst isObject = require('../helpers/isObject');\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function () {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n  this[symbols.schemaMixedSymbol] = true;\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nMixed.schemaName = 'Mixed';\nMixed.defaultOptions = {};\n/*!\n * Inherits from SchemaType.\n */\n\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n/**\n * Attaches a getter for all Mixed paths.\n *\n * ####Example:\n *\n *     // Hide the 'hidden' path\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\n *\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nMixed.get = SchemaType.get;\n/**\n * Sets a default option for all Mixed instances.\n *\n * ####Example:\n *\n *     // Make all mixed instances have `required` of true by default.\n *     mongoose.Schema.Mixed.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nMixed.set = SchemaType.set;\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function (val) {\n  return val;\n};\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\n\nMixed.prototype.castForQuery = function ($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n\n  return $cond;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = Mixed;","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/schema/mixed.js"],"names":["SchemaType","require","symbols","isObject","Mixed","path","options","default","def","Array","isArray","length","shared","Object","keys","call","schemaMixedSymbol","schemaName","defaultOptions","prototype","create","constructor","get","set","cast","val","castForQuery","$cond","arguments","module","exports"],"mappings":"AAAA;;;AAIA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAD,CAAxB;AAEA;;;;;;;;;;AASA,SAASG,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC5B,MAAIA,OAAO,IAAIA,OAAO,CAACC,OAAvB,EAAgC;AAC9B,UAAMC,GAAG,GAAGF,OAAO,CAACC,OAApB;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACG,MAAJ,KAAe,CAAzC,EAA4C;AAC1C;AACAL,MAAAA,OAAO,CAACC,OAAR,GAAkBE,KAAlB;AACD,KAHD,MAGO,IAAI,CAACH,OAAO,CAACM,MAAT,IAAmBT,QAAQ,CAACK,GAAD,CAA3B,IAAoCK,MAAM,CAACC,IAAP,CAAYN,GAAZ,EAAiBG,MAAjB,KAA4B,CAApE,EAAuE;AAC5E;AACAL,MAAAA,OAAO,CAACC,OAAR,GAAkB,YAAW;AAC3B,eAAO,EAAP;AACD,OAFD;AAGD;AACF;;AAEDP,EAAAA,UAAU,CAACe,IAAX,CAAgB,IAAhB,EAAsBV,IAAtB,EAA4BC,OAA5B,EAAqC,OAArC;AAEA,OAAKJ,OAAO,CAACc,iBAAb,IAAkC,IAAlC;AACD;AAED;;;;;;;;AAMAZ,KAAK,CAACa,UAAN,GAAmB,OAAnB;AAEAb,KAAK,CAACc,cAAN,GAAuB,EAAvB;AAEA;;;;AAGAd,KAAK,CAACe,SAAN,GAAkBN,MAAM,CAACO,MAAP,CAAcpB,UAAU,CAACmB,SAAzB,CAAlB;AACAf,KAAK,CAACe,SAAN,CAAgBE,WAAhB,GAA8BjB,KAA9B;AAEA;;;;;;;;;;;;;;;;;;AAkBAA,KAAK,CAACkB,GAAN,GAAYtB,UAAU,CAACsB,GAAvB;AAEA;;;;;;;;;;;;;;;;;;;AAmBAlB,KAAK,CAACmB,GAAN,GAAYvB,UAAU,CAACuB,GAAvB;AAEA;;;;;;;;;AASAnB,KAAK,CAACe,SAAN,CAAgBK,IAAhB,GAAuB,UAASC,GAAT,EAAc;AACnC,SAAOA,GAAP;AACD,CAFD;AAIA;;;;;;;;;AAQArB,KAAK,CAACe,SAAN,CAAgBO,YAAhB,GAA+B,UAASC,KAAT,EAAgBF,GAAhB,EAAqB;AAClD,MAAIG,SAAS,CAACjB,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOc,GAAP;AACD;;AACD,SAAOE,KAAP;AACD,CALD;AAOA;;;;;AAIAE,MAAM,CAACC,OAAP,GAAiB1B,KAAjB","sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst SchemaType = require('../schematype');\nconst symbols = require('./symbols');\nconst isObject = require('../helpers/isObject');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n\n  this[symbols.schemaMixedSymbol] = true;\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nMixed.schemaName = 'Mixed';\n\nMixed.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n\n/**\n * Attaches a getter for all Mixed paths.\n *\n * ####Example:\n *\n *     // Hide the 'hidden' path\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\n *\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\n *\n * @param {Function} getter\n * @return {this}\n * @function get\n * @static\n * @api public\n */\n\nMixed.get = SchemaType.get;\n\n/**\n * Sets a default option for all Mixed instances.\n *\n * ####Example:\n *\n *     // Make all mixed instances have `required` of true by default.\n *     mongoose.Schema.Mixed.set('required', true);\n *\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\n *\n * @param {String} option - The option you'd like to set the value for\n * @param {*} value - value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nMixed.set = SchemaType.set;\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function(val) {\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n"]},"metadata":{},"sourceType":"script"}