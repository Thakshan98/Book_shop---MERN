{"ast":null,"code":"'use strict';\n\nconst cloneRegExp = require('regexp-clone');\n\nconst Decimal = require('../types/decimal128');\n\nconst ObjectId = require('../types/objectid');\n\nconst specialProperties = require('./specialProperties');\n\nconst isMongooseObject = require('./isMongooseObject');\n\nconst getFunctionName = require('./getFunctionName');\n\nconst isBsonType = require('./isBsonType');\n\nconst isObject = require('./isObject');\n\nconst symbols = require('./symbols');\n/*!\n * Object clone with Mongoose natives support.\n *\n * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.\n *\n * Functions are never cloned.\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.\n * @return {Object} the cloned object\n * @api private\n */\n\n\nfunction clone(obj, options, isArrayChild) {\n  if (obj == null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return cloneArray(obj, options);\n  }\n\n  if (isMongooseObject(obj)) {\n    // Single nested subdocs should apply getters later in `applyGetters()`\n    // when calling `toObject()`. See gh-7442, gh-8295\n    if (options && options._skipSingleNestedGetters && obj.$isSingleNested) {\n      options = Object.assign({}, options, {\n        getters: false\n      });\n    }\n\n    if (options && options.json && typeof obj.toJSON === 'function') {\n      return obj.toJSON(options);\n    }\n\n    return obj.toObject(options);\n  }\n\n  if (obj.constructor) {\n    switch (getFunctionName(obj.constructor)) {\n      case 'Object':\n        return cloneObject(obj, options, isArrayChild);\n\n      case 'Date':\n        return new obj.constructor(+obj);\n\n      case 'RegExp':\n        return cloneRegExp(obj);\n\n      default:\n        // ignore\n        break;\n    }\n  }\n\n  if (obj instanceof ObjectId) {\n    return new ObjectId(obj.id);\n  }\n\n  if (isBsonType(obj, 'Decimal128')) {\n    if (options && options.flattenDecimals) {\n      return obj.toJSON();\n    }\n\n    return Decimal.fromString(obj.toString());\n  }\n\n  if (!obj.constructor && isObject(obj)) {\n    // object created with Object.create(null)\n    return cloneObject(obj, options, isArrayChild);\n  }\n\n  if (obj[symbols.schemaTypeSymbol]) {\n    return obj.clone();\n  } // If we're cloning this object to go into a MongoDB command,\n  // and there's a `toBSON()` function, assume this object will be\n  // stored as a primitive in MongoDB and doesn't need to be cloned.\n\n\n  if (options && options.bson && typeof obj.toBSON === 'function') {\n    return obj;\n  }\n\n  if (obj.valueOf != null) {\n    return obj.valueOf();\n  }\n\n  return cloneObject(obj, options, isArrayChild);\n}\n\nmodule.exports = clone;\n/*!\n * ignore\n */\n\nfunction cloneObject(obj, options, isArrayChild) {\n  const minimize = options && options.minimize;\n  const ret = {};\n  let hasKeys;\n\n  for (const k in obj) {\n    if (specialProperties.has(k)) {\n      continue;\n    } // Don't pass `isArrayChild` down\n\n\n    const val = clone(obj[k], options);\n\n    if (!minimize || typeof val !== 'undefined') {\n      if (minimize === false && typeof val === 'undefined') {\n        delete ret[k];\n      } else {\n        hasKeys || (hasKeys = true);\n        ret[k] = val;\n      }\n    }\n  }\n\n  return minimize && !isArrayChild ? hasKeys && ret : ret;\n}\n\nfunction cloneArray(arr, options) {\n  const ret = [];\n\n  for (const item of arr) {\n    ret.push(clone(item, options, true));\n  }\n\n  return ret;\n}","map":{"version":3,"sources":["C:/Users/Thakshan/Desktop/BookCorner/node_modules/mongoose/lib/helpers/clone.js"],"names":["cloneRegExp","require","Decimal","ObjectId","specialProperties","isMongooseObject","getFunctionName","isBsonType","isObject","symbols","clone","obj","options","isArrayChild","Array","isArray","cloneArray","_skipSingleNestedGetters","$isSingleNested","Object","assign","getters","json","toJSON","toObject","constructor","cloneObject","id","flattenDecimals","fromString","toString","schemaTypeSymbol","bson","toBSON","valueOf","module","exports","minimize","ret","hasKeys","k","has","val","arr","item","push"],"mappings":"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","sourcesContent":["'use strict';\n\n\nconst cloneRegExp = require('regexp-clone');\nconst Decimal = require('../types/decimal128');\nconst ObjectId = require('../types/objectid');\nconst specialProperties = require('./specialProperties');\nconst isMongooseObject = require('./isMongooseObject');\nconst getFunctionName = require('./getFunctionName');\nconst isBsonType = require('./isBsonType');\nconst isObject = require('./isObject');\nconst symbols = require('./symbols');\n\n\n/*!\n * Object clone with Mongoose natives support.\n *\n * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.\n *\n * Functions are never cloned.\n *\n * @param {Object} obj the object to clone\n * @param {Object} options\n * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.\n * @return {Object} the cloned object\n * @api private\n */\n\nfunction clone(obj, options, isArrayChild) {\n  if (obj == null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return cloneArray(obj, options);\n  }\n\n  if (isMongooseObject(obj)) {\n    // Single nested subdocs should apply getters later in `applyGetters()`\n    // when calling `toObject()`. See gh-7442, gh-8295\n    if (options && options._skipSingleNestedGetters && obj.$isSingleNested) {\n      options = Object.assign({}, options, { getters: false });\n    }\n\n    if (options && options.json && typeof obj.toJSON === 'function') {\n      return obj.toJSON(options);\n    }\n    return obj.toObject(options);\n  }\n\n  if (obj.constructor) {\n    switch (getFunctionName(obj.constructor)) {\n      case 'Object':\n        return cloneObject(obj, options, isArrayChild);\n      case 'Date':\n        return new obj.constructor(+obj);\n      case 'RegExp':\n        return cloneRegExp(obj);\n      default:\n        // ignore\n        break;\n    }\n  }\n\n  if (obj instanceof ObjectId) {\n    return new ObjectId(obj.id);\n  }\n\n  if (isBsonType(obj, 'Decimal128')) {\n    if (options && options.flattenDecimals) {\n      return obj.toJSON();\n    }\n    return Decimal.fromString(obj.toString());\n  }\n\n  if (!obj.constructor && isObject(obj)) {\n    // object created with Object.create(null)\n    return cloneObject(obj, options, isArrayChild);\n  }\n\n  if (obj[symbols.schemaTypeSymbol]) {\n    return obj.clone();\n  }\n\n  // If we're cloning this object to go into a MongoDB command,\n  // and there's a `toBSON()` function, assume this object will be\n  // stored as a primitive in MongoDB and doesn't need to be cloned.\n  if (options && options.bson && typeof obj.toBSON === 'function') {\n    return obj;\n  }\n\n  if (obj.valueOf != null) {\n    return obj.valueOf();\n  }\n\n  return cloneObject(obj, options, isArrayChild);\n}\nmodule.exports = clone;\n\n/*!\n * ignore\n */\n\nfunction cloneObject(obj, options, isArrayChild) {\n  const minimize = options && options.minimize;\n  const ret = {};\n  let hasKeys;\n\n  for (const k in obj) {\n    if (specialProperties.has(k)) {\n      continue;\n    }\n\n    // Don't pass `isArrayChild` down\n    const val = clone(obj[k], options);\n\n    if (!minimize || (typeof val !== 'undefined')) {\n      if (minimize === false && typeof val === 'undefined') {\n        delete ret[k];\n      } else {\n        hasKeys || (hasKeys = true);\n        ret[k] = val;\n      }\n    }\n  }\n\n  return minimize && !isArrayChild ? hasKeys && ret : ret;\n}\n\nfunction cloneArray(arr, options) {\n  const ret = [];\n\n  for (const item of arr) {\n    ret.push(clone(item, options, true));\n  }\n\n  return ret;\n}"]},"metadata":{},"sourceType":"script"}